{"id":"../../../node_modules/one-model-address/src/address.ts","dependencies":[{"name":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/one-model-address/tsconfig.json","includedInParent":true,"mtime":1570193615884},{"name":"/Users/user/Documents/Projects/ssob/ovFW/packages/OBD-Portal/package.json","includedInParent":true,"mtime":1570193308535},{"name":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/one-model-address/package.json","includedInParent":true,"mtime":1570193615884},{"name":"one-core","loc":{"line":3,"column":25},"parent":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/one-model-address/src/address.ts","resolved":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/one-core/index.ts"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar one_core_1 = require(\"one-core\");\nexports.address = function (value, context) {\n    if (value === void 0) { value = {}; }\n    if (context === void 0) { context = {}; }\n    var Street = value.Street, Email = value.Email, City = value.City, County = value.County, State = value.State, PostalCode = value.PostalCode, Country = value.Country, _a = value.PhoneNumbers, PhoneNumbers = _a === void 0 ? [] : _a;\n    var result = {\n        street: Street,\n        email: Email,\n        city: City,\n        county: County,\n        country: Country,\n        state: State,\n        zip: PostalCode,\n        phones: one_core_1.array(PhoneNumbers).map(function (p) {\n            var Type = p.Type, Number = p.Number;\n            return {\n                num: Number,\n                type: ((Type) && (Type.toUpperCase())),\n            };\n        }),\n    };\n    return result;\n};\n"},"sourceMaps":{"js":{"version":3,"file":"address.js","sourceRoot":"","sources":["../../../node_modules/one-model-address/src/address.ts"],"names":[],"mappings":";;AAAA,qCAAiC;AAGpB,QAAA,OAAO,GAAG,UACnB,KAAe,EACf,OAAiB;IADjB,sBAAA,EAAA,UAAe;IACf,wBAAA,EAAA,YAAiB;IAGb,IAAA,qBAAM,EACN,mBAAK,EACL,iBAAI,EACJ,qBAAM,EACN,mBAAK,EACL,6BAAU,EACV,uBAAO,EACP,uBAAiB,EAAjB,sCAAiB,CACX;IAEV,IAAM,MAAM,GAAY;QACpB,MAAM,EAAE,MAAM;QACd,KAAK,EAAE,KAAK;QACZ,IAAI,EAAE,IAAI;QACV,MAAM,EAAE,MAAM;QACd,OAAO,EAAE,OAAO;QAChB,KAAK,EAAE,KAAK;QACZ,GAAG,EAAE,UAAU;QACf,MAAM,EAAE,gBAAK,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,UAAC,CAAM;YAE/B,IAAA,aAAI,EACJ,iBAAM,CACJ;YACN,OAAO;gBACH,GAAG,EAAE,MAAM;gBACX,IAAI,EAAE,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CACjC;aACJ,CAAC;QACN,CAAC,CAAC;KACL,CAAC;IAEF,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import { array } from 'one-core';\nimport { Address } from 'one-model';\n\nexport const address = (\n    value: any = {},\n    context: any = {},\n): Address => {\n    const {\n        Street,\n        Email,\n        City,\n        County,\n        State,\n        PostalCode,\n        Country,\n        PhoneNumbers = [],\n    } = value;\n\n    const result: Address = {\n        street: Street,\n        email: Email,\n        city: City,\n        county: County,\n        country: Country,\n        state: State,\n        zip: PostalCode,\n        phones: array(PhoneNumbers).map((p: any) => {\n            const {\n                Type,\n                Number,\n            } = p;\n            return {\n                num: Number,\n                type: (\n                    (Type) && (Type.toUpperCase())\n                ),\n            };\n        }),\n    };\n\n    return result;\n};\n"]}},"error":null,"hash":"9c722130d8ea5f92b3c44f1f27dbb81b","cacheData":{"env":{}}}
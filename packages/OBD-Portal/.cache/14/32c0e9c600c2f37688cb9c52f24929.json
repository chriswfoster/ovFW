{"id":"../../../node_modules/unch-app/src/epics/caller/index.ts","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/tsconfig.json","includedInParent":true,"mtime":1569552466469},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/OBD-Portal/package.json","includedInParent":true,"mtime":1569955431018},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/package.json","includedInParent":true,"mtime":1569958537334},{"name":"redux-observable","loc":{"line":3,"column":33},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/epics/caller/index.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/redux-observable/lib/esm/index.js"},{"name":"rxjs/operators","loc":{"line":4,"column":26},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/epics/caller/index.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/rxjs/_esm5/operators/index.js"},{"name":"rxjs","loc":{"line":5,"column":21},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/epics/caller/index.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/rxjs/_esm5/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar redux_observable_1 = require(\"redux-observable\");\nvar operators_1 = require(\"rxjs/operators\");\nvar rxjs_1 = require(\"rxjs\");\nvar Types;\n(function (Types) {\n    Types[\"SET\"] = \"one-caller-set\";\n    Types[\"RESET\"] = \"one-caller-reset\";\n    Types[\"SELECT\"] = \"one-caller-select\";\n    Types[\"UNSELECT\"] = \"one-caller-unselect\";\n    Types[\"ADD\"] = \"one-caller-add\";\n    Types[\"UPDATE\"] = \"one-caller-update\";\n    Types[\"DELETE\"] = \"one-caller-delete\";\n    Types[\"PATIENT\"] = \"one-caller-patient\";\n    Types[\"PROVIDER\"] = \"one-caller-provider\";\n    Types[\"OTHER\"] = \"one-caller-other\";\n    Types[\"CALLERPROVIDER\"] = \"caller-provider\";\n})(Types = exports.Types || (exports.Types = {}));\n;\nvar fetchCaller = function (payload) { return ({ type: Types.SET, payload: payload }); };\nvar oncecallerupdate = function (payload) { return ({ type: Types.UPDATE, payload: payload }); };\nexports.updateCallertoDB = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.UPDATE), operators_1.mergeMap(function (action) {\n        var updateDetails = function (payload) {\n            var data = payload;\n            var response = server.post({\n                path: \"callerdetails\",\n                data: data\n            }).then(function (response) { return response; });\n            return rxjs_1.from(response);\n        };\n        return updateDetails(action.payload).pipe(operators_1.map(function (response) { return fetchCaller(response); }));\n    }));\n}); };\nexports.ferchCallerFromDB = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.CALLERPROVIDER), operators_1.mergeMap(function (action) {\n        var getCallerDetails = function (payload) {\n            var response = server.get({\n                path: \"getcallerdetails?phone=\" + payload.number + \"&typename=provider\",\n            }).then(function (response) { return response; });\n            return rxjs_1.from(response);\n        };\n        return getCallerDetails(action.payload).pipe(operators_1.map(function (response) { return fetchCaller(response); }));\n    }));\n}); };\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../node_modules/unch-app/src/epics/caller/index.ts"],"names":[],"mappings":";;AACA,qDAA4E;AAC5E,4CAA8C;AAE9C,6BAAwC;AAMxC,IAAkB,KAajB;AAbD,WAAkB,KAAK;IACnB,+BAAsB,CAAA;IACtB,mCAA0B,CAAA;IAC1B,qCAA4B,CAAA;IAC5B,yCAAgC,CAAA;IAChC,+BAAsB,CAAA;IACtB,qCAA4B,CAAA;IAC5B,qCAA4B,CAAA;IAC5B,uCAA4B,CAAA;IAC5B,yCAA8B,CAAA;IAC9B,mCAAwB,CAAA;IACxB,2CAAiC,CAAA;AAErC,CAAC,EAbiB,KAAK,GAAL,aAAK,KAAL,aAAK,QAatB;AAAA,CAAC;AAGF,IAAM,WAAW,GAAG,UAAC,OAAW,IAAK,OAAA,CAAC,EAAE,IAAI,EAAC,KAAK,CAAC,GAAG,EAAC,OAAO,SAAA,EAAC,CAAC,EAA3B,CAA2B,CAAC;AACjE,IAAM,gBAAgB,GAAG,UAAC,OAAW,IAAK,OAAA,CAAC,EAAC,IAAI,EAAC,KAAK,CAAC,MAAM,EAAC,OAAO,SAAA,EAAC,CAAC,EAA7B,CAA6B,CAAC;AAQ3D,QAAA,gBAAgB,GAAG,UAAC,OAAW,IAAM,OAAA,CAE9C,UAAC,OAAW;IACE,IAAA,uBAAM,CAAU;IACtB,OAAO,OAAO,CAAC,IAAI,CACf,yBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EACpB,oBAAQ,CAAC,UAAA,MAAM;QACP,IAAM,aAAa,GAAG,UAAC,OAAO;YACtB,IAAM,IAAI,GAAG,OAAO,CAAC;YACrB,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC;gBACrB,IAAI,EAAC,eAAe;gBACpB,IAAI,EAAC,IAAI;aAChB,CAAC,CAAC,IAAI,CAAC,UAAC,QAAa,IAAI,OAAA,QAAQ,EAAR,CAAQ,CAAC,CAAA;YAC3C,OAAO,WAAI,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAA;QACD,OAAO,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CACrC,eAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,WAAW,CAAC,QAAQ,CAAC,EAArB,CAAqB,CAAC,CACzC,CAAA;IACT,CAAC,CAAC,CAEL,CAAA;AACT,CAAC,CACJ,EAtBiD,CAsBjD,CAAA;AAEY,QAAA,iBAAiB,GAAG,UAAC,OAAW,IAAK,OAAA,CAC1C,UAAC,OAAW;IACG,IAAA,uBAAM,CAAY;IACzB,OAAO,OAAO,CAAC,IAAI,CACf,yBAAM,CAAC,KAAK,CAAC,cAAc,CAAC,EAC5B,oBAAQ,CAAC,UAAA,MAAM;QACX,IAAM,gBAAgB,GAAG,UAAC,OAAO;YAC7B,IAAM,QAAQ,GAAC,MAAM,CAAC,GAAG,CAAC;gBACtB,IAAI,EAAC,yBAAyB,GAAC,OAAO,CAAC,MAAM,GAAC,oBAAoB;aACrE,CAAC,CAAC,IAAI,CAAC,UAAC,QAAY,IAAG,OAAA,QAAQ,EAAR,CAAQ,CAAC,CAAA;YACrC,OAAO,WAAI,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAA;QACD,OAAO,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CACxC,eAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,WAAW,CAAC,QAAQ,CAAC,EAArB,CAAqB,CAAC,CAC7C,CAAA;IACD,CAAC,CAAC,CACL,CAAA;AACT,CAAC,CACR,EAlBiD,CAkBjD,CAAA","sourcesContent":["\nimport { createEpicMiddleware,combineEpics,ofType } from 'redux-observable';\nimport { map,mergeMap } from 'rxjs/operators';\nimport {ajax } from 'rxjs/ajax';\nimport { from, Observable } from 'rxjs';\n\nimport { useCtx } from 'one-ui-provider';\nimport { isArray } from 'util';\n\n\nexport const enum Types {\n    SET = 'one-caller-set',\n    RESET = 'one-caller-reset',\n    SELECT = 'one-caller-select',\n    UNSELECT = 'one-caller-unselect',\n    ADD = 'one-caller-add',\n    UPDATE = 'one-caller-update',\n    DELETE = 'one-caller-delete',\n    PATIENT='one-caller-patient',\n    PROVIDER='one-caller-provider',\n    OTHER='one-caller-other',\n    CALLERPROVIDER= 'caller-provider',\n\n};\n\n\nconst fetchCaller = (payload:any) => ({ type:Types.SET,payload});\nconst oncecallerupdate = (payload:any) => ({type:Types.UPDATE,payload});\n\n export interface Action<T, P = any> {\n    type: T,\n    payload: P,\n}\n\n\nexport const updateCallertoDB = (context:any ) => (\n\n    (action$:any) =>{\n            const{server}=context;\n            return action$.pipe(\n                ofType(Types.UPDATE),\n                mergeMap(action => {\n                        const updateDetails = (payload) => {\n                                const data = payload;\n                                const response = server.post({\n                                        path:\"callerdetails\",\n                                        data:data\n                                }).then((response: any) =>response)\n                        return from(response);\n                        }\n                        return updateDetails(action.payload).pipe(\n                            map(response => fetchCaller(response))\n                        )\n                })\n\n            )\n    }\n)\n\nexport const ferchCallerFromDB = (context:any) => (\n        (action$:any) =>{\n                const {server} = context;\n                return action$.pipe(\n                    ofType(Types.CALLERPROVIDER),\n                    mergeMap(action => {\n                        const getCallerDetails = (payload) => {\n                            const response=server.get({\n                                path:\"getcallerdetails?phone=\"+payload.number+\"&typename=provider\",\n                            }).then((response:any)=>response)\n                        return from(response);\n                        }\n                        return getCallerDetails(action.payload).pipe(\n                            map(response => fetchCaller(response))\n                    )\n                    })\n                )\n        }\n)\n\n\n"]}},"error":null,"hash":"a4b9625035c9cddd35ecc7b339d2afda","cacheData":{"env":{}}}
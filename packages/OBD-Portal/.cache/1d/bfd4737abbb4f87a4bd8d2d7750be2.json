{"id":"../../../node_modules/one-server-ha/src/server.ts","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-server-ha/tsconfig.json","includedInParent":true,"mtime":1569955866860},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/OBD-Portal/package.json","includedInParent":true,"mtime":1569955431018},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-server-ha/package.json","includedInParent":true,"mtime":1569955866859},{"name":"uuid","loc":{"line":49,"column":21},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-server-ha/src/server.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/uuid/index.js"}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uuid_1 = require(\"uuid\");\nvar HAServer = /** @class */ (function () {\n    function HAServer(servers) {\n        var _this = this;\n        /**\n         * Helper to build a query string\n         * (data is uri encoded)\n         * @param data data to be converted to a query string\n         */\n        this.query = function (data) {\n            var path = '';\n            if (data) {\n                var entries = Object.entries(data);\n                if ((entries) && (entries.length > 0)) {\n                    var sep = '?';\n                    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                        var _a = entries_1[_i], name = _a[0], value = _a[1];\n                        if (value) {\n                            var encoded = encodeURIComponent(value);\n                            path = \"\" + path + sep + name + \"=\" + encoded;\n                            sep = '&';\n                        }\n                    }\n                }\n            }\n            return path;\n        };\n        this.gatewayError = function (status) {\n            return ((status == 502) || (status == 503) || (status == 504));\n        };\n        this.checkHealth = function (server, frequency) {\n            var base = server.base, health = server.health;\n            var url = (health) || (base + \"healthcheck\");\n            console.debug('one-server-health', 'setting up monitor', JSON.stringify({\n                url: url,\n                server: server,\n                frequency: frequency,\n            }));\n            setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {\n                var status, error_1;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            console.debug('one-server-health', 'time to check', JSON.stringify({\n                                url: url,\n                                server: server,\n                                frequency: frequency,\n                            }));\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, fetch(url)];\n                        case 2:\n                            status = (_a.sent()).status;\n                            // gateway error\n                            if (this.gatewayError(status)) {\n                                console.debug('one-server-health', 'gateway error, mark inactive, re-start montior', JSON.stringify({\n                                    url: url,\n                                    status: status,\n                                    server: server,\n                                    frequency: frequency,\n                                }));\n                                this.checkHealth(server, frequency);\n                            }\n                            else {\n                                // mark active and\n                                // stop monitoring\n                                server.active = true;\n                                server.monitored = false;\n                                console.debug('one-server-health', 'valid response, mark active, stop monitor', JSON.stringify({\n                                    url: url,\n                                    status: status,\n                                    server: server,\n                                    frequency: frequency,\n                                }));\n                            }\n                            return [3 /*break*/, 4];\n                        case 3:\n                            error_1 = _a.sent();\n                            console.debug('one-server-health', 'not reachable, mark inactive, re-start montior', JSON.stringify({\n                                url: url,\n                                error: error_1,\n                                server: server,\n                                frequency: frequency,\n                            }));\n                            this.checkHealth(server, frequency);\n                            return [3 /*break*/, 4];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            }); }, frequency);\n        };\n        this.update = function (server, active) {\n            server.active = active;\n            var _a = _this, monitor = _a.monitor, frequency = _a.frequency;\n            if ((monitor) && (!(active))) {\n                var monitored = server.monitored;\n                if (monitored) {\n                    console.debug('one-server-health', 'already monitored, ignore health check', JSON.stringify({\n                        monitor: monitor, frequency: frequency, server: server,\n                    }));\n                }\n                else {\n                    console.debug('one-server-health', 'setting up health check monitor', JSON.stringify({\n                        monitor: monitor, frequency: frequency, server: server,\n                    }));\n                    _this.checkHealth(server, frequency);\n                    server.monitored = true;\n                }\n            }\n        };\n        var _a = servers.monitor, monitor = _a === void 0 ? true : _a, _b = servers.frequency, frequency = _b === void 0 ? 10000 : _b, _c = servers.locations, locations = _c === void 0 ? [] : _c;\n        this.key = uuid_1.v4();\n        this.monitor = monitor;\n        this.frequency = frequency;\n        this.servers = locations.map(function (location) { return (__assign({}, location, { id: uuid_1.v4(), active: true, monitored: false })); });\n        console.debug('one-server', 'instance initialized', JSON.stringify(__assign({}, this)));\n    }\n    HAServer.prototype.forget = function () {\n        this.key = uuid_1.v4();\n        return;\n    };\n    HAServer.prototype.handle = function (req, method) {\n        var _this = this;\n        var key = this.key;\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\n            var list, _a, servers, monitor, _i, servers_1, server, active, _b, servers_2, server, active, handled, _c, list_1, server, path, data, _d, retry, id, base, url, body, resp, status, currKey, data_1, exp_1, results, code, error, finalres, errors, error_2;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        list = [];\n                        _a = this, servers = _a.servers, monitor = _a.monitor;\n                        // try active servers first\n                        // inactive servers will be made active\n                        // by the monitor thread\n                        for (_i = 0, servers_1 = servers; _i < servers_1.length; _i++) {\n                            server = servers_1[_i];\n                            active = server.active;\n                            if (active) {\n                                list.push(server);\n                            }\n                        }\n                        // no monitoring\n                        // try inactive servers as well\n                        if (!(monitor)) {\n                            for (_b = 0, servers_2 = servers; _b < servers_2.length; _b++) {\n                                server = servers_2[_b];\n                                active = server.active;\n                                if (!(active)) {\n                                    list.push(server);\n                                }\n                            }\n                        }\n                        handled = false;\n                        _c = 0, list_1 = list;\n                        _e.label = 1;\n                    case 1:\n                        if (!(_c < list_1.length)) return [3 /*break*/, 14];\n                        server = list_1[_c];\n                        path = req.path, data = req.data, _d = req.retry, retry = _d === void 0 ? true : _d;\n                        id = server.id, base = server.base;\n                        url = void 0, body = void 0;\n                        if (method === 'GET') {\n                            url = \"\" + base + path + this.query(data);\n                        }\n                        else {\n                            url = \"\" + base + path;\n                            body = JSON.stringify(data);\n                        }\n                        console.debug('one-server', 'request url', JSON.stringify({\n                            id: id, url: url, method: method, data: data,\n                        }));\n                        _e.label = 2;\n                    case 2:\n                        _e.trys.push([2, 11, , 12]);\n                        return [4 /*yield*/, fetch(url, {\n                                method: method,\n                                body: body,\n                            })];\n                    case 3:\n                        resp = _e.sent();\n                        status = resp.status;\n                        currKey = this.key;\n                        if (!(key !== currKey)) return [3 /*break*/, 4];\n                        handled = true;\n                        // reject response\n                        reject({\n                            status: -1,\n                        });\n                        console.debug('one-server', 'ignored, keys do not match', JSON.stringify({\n                            id: id, url: url, key: key, currKey: currKey,\n                        }));\n                        if (this.gatewayError(status)) {\n                            console.debug('one-server', 'ignored, keys do not match, gateway error', JSON.stringify({\n                                id: id, url: url, key: key, currKey: currKey,\n                            }));\n                            // server not reachable\n                            this.update(server, false);\n                        }\n                        else {\n                            // just mark the server active \n                            this.update(server, true);\n                        }\n                        return [3 /*break*/, 10];\n                    case 4:\n                        console.debug('one-server', 'accepted, keys match', JSON.stringify({\n                            id: id, url: url, key: key, currKey: currKey,\n                        }));\n                        if (!this.gatewayError(status)) return [3 /*break*/, 5];\n                        console.debug('one-server', 'accepted, keys match, gateway error', JSON.stringify({\n                            id: id, url: url, key: key, currKey: currKey,\n                        }));\n                        // server not reachable\n                        this.update(server, false);\n                        return [3 /*break*/, 10];\n                    case 5:\n                        handled = true;\n                        this.update(server, true);\n                        data_1 = void 0;\n                        _e.label = 6;\n                    case 6:\n                        _e.trys.push([6, 8, , 9]);\n                        return [4 /*yield*/, resp.json()];\n                    case 7:\n                        data_1 = _e.sent();\n                        return [3 /*break*/, 9];\n                    case 8:\n                        exp_1 = _e.sent();\n                        return [3 /*break*/, 9];\n                    case 9:\n                        // resolve the promise\n                        if (resp.ok) {\n                            results = (data_1) && (data_1.results);\n                            code = (data_1) && (data_1.code);\n                            error = (data_1) && (data_1.error);\n                            finalres = [results, code, error];\n                            resolve(finalres);\n                        }\n                        else {\n                            errors = (data_1) && (data_1.error);\n                            reject({\n                                status: status, errors: errors,\n                            });\n                            console.debug('one-server', 'request error', JSON.stringify({\n                                id: id, key: key, url: url, status: status, data: data_1,\n                            }));\n                        }\n                        _e.label = 10;\n                    case 10: return [3 /*break*/, 12];\n                    case 11:\n                        error_2 = _e.sent();\n                        // network/infrastructure error\n                        // mark the server inactive \n                        this.update(server, false);\n                        if (!(retry)) {\n                            // do not retry\n                            return [3 /*break*/, 14];\n                        }\n                        return [3 /*break*/, 12];\n                    case 12:\n                        // break out of the loop\n                        if (handled) {\n                            // done\n                            return [3 /*break*/, 14];\n                        }\n                        _e.label = 13;\n                    case 13:\n                        _c++;\n                        return [3 /*break*/, 1];\n                    case 14:\n                        if (!(handled)) {\n                            // request was not handled\n                            reject({\n                                status: 0,\n                                errors: [{\n                                        error_description: 'Unable to connect, server(s) not available'\n                                    }]\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    HAServer.prototype.get = function (req) {\n        // make a GET request\n        return this.handle(req, 'GET');\n    };\n    HAServer.prototype.post = function (req) {\n        // make a POST request\n        return this.handle(req, 'POST');\n    };\n    return HAServer;\n}());\nexports.HAServer = HAServer;\n"},"sourceMaps":{"js":{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../node_modules/one-server-ha/src/server.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 as uuid } from 'uuid';\nimport { Server, Req } from 'one-server';\n\nexport class HAServer implements Server {\n  private key: string;\n  private monitor: boolean;\n  private frequency: number;\n\n  private servers: {\n    id: string,\n    base: string,\n    health: string,\n    active: boolean,\n    monitored: false,\n  }[];\n\n  constructor(\n    servers: any,\n  ) {\n    const {\n      monitor = true,\n      frequency = 10000,\n      locations = [],\n    } = servers;\n    this.key = uuid();\n    this.monitor = monitor;\n    this.frequency = frequency;\n\n    this.servers = locations.map((location: any) => ({\n      ...location,\n      id: uuid(),\n      active: true,\n      monitored: false,\n    }));\n\n    console.debug(\n      'one-server',\n      'instance initialized',\n      JSON.stringify({\n        ...this,\n      }),\n    );\n  }\n\n  public forget(): Promise<any> {\n    this.key = uuid();\n    return;\n  }\n\n  /**\n   * Helper to build a query string\n   * (data is uri encoded)\n   * @param data data to be converted to a query string\n   */\n  protected query = (data: any): string => {\n    let path = '';\n    if (data) {\n      const entries: any = Object.entries(data);\n      if ((entries) && (entries.length > 0)) {\n        let sep = '?';\n        for (const [name, value] of entries) {\n          if (value) {\n            const encoded = encodeURIComponent(value);\n            path = `${path}${sep}${name}=${encoded}`;\n            sep = '&';\n          }\n        }\n      }\n    }\n    return path;\n  }\n\n  protected gatewayError = (status: number): boolean => {\n    return (\n      (status == 502) || (status == 503) || (status == 504)\n    );\n  }\n\n  protected checkHealth = (\n    server: any, frequency: number,\n  ): void => {\n    const { base, health } = server;\n    const url = (health) || (`${base}healthcheck`);\n\n    console.debug(\n      'one-server-health',\n      'setting up monitor',\n      JSON.stringify({\n        url,\n        server,\n        frequency,\n      }),\n    );\n\n    setTimeout(async () => {\n      console.debug(\n        'one-server-health',\n        'time to check',\n        JSON.stringify({\n          url,\n          server,\n          frequency,\n        }),\n      );\n\n      try {\n        const { status } = await fetch(url);\n        // gateway error\n        if (this.gatewayError(status)) {\n          console.debug(\n            'one-server-health',\n            'gateway error, mark inactive, re-start montior',\n            JSON.stringify({\n              url,\n              status,\n              server,\n              frequency,\n            }),\n          );\n          this.checkHealth(server, frequency);\n        } else {\n          // mark active and\n          // stop monitoring\n          server.active = true;\n          server.monitored = false;\n          console.debug(\n            'one-server-health',\n            'valid response, mark active, stop monitor',\n            JSON.stringify({\n              url,\n              status,\n              server,\n              frequency,\n            }),\n          );\n        }\n      } catch (error) {\n        console.debug(\n          'one-server-health',\n          'not reachable, mark inactive, re-start montior',\n          JSON.stringify({\n            url,\n            error,\n            server,\n            frequency,\n          }),\n        );\n        this.checkHealth(server, frequency);\n      }\n    }, frequency);\n  }\n\n  protected update = (server: any, active: boolean): void => {\n    server.active = active;\n    const { monitor, frequency } = this;\n    if ((monitor) && (!(active))) {\n      const { monitored } = server;\n      if (monitored) {\n        console.debug(\n          'one-server-health',\n          'already monitored, ignore health check',\n          JSON.stringify({\n            monitor, frequency, server,\n          }),\n        );\n      } else {\n        console.debug(\n          'one-server-health',\n          'setting up health check monitor',\n          JSON.stringify({\n            monitor, frequency, server,\n          }),\n        );\n        this.checkHealth(server, frequency);\n        server.monitored = true;\n      }\n    }\n  }\n\n  protected handle(req: Req, method: string): Promise<any> {\n    const key = this.key;\n\n    return new Promise(async (resolve, reject) => {\n      const list = [];\n      const { servers, monitor } = this;\n\n      // try active servers first\n      // inactive servers will be made active\n      // by the monitor thread\n      for (const server of servers) {\n        const { active } = server;\n        if (active) {\n          list.push(server);\n        }\n      }\n\n      // no monitoring\n      // try inactive servers as well\n      if (!(monitor)) {\n        for (const server of servers) {\n          const { active } = server;\n          if (!(active)) {\n            list.push(server);\n          }\n        }\n      }\n\n      // flag request was handled\n      let handled: boolean = false;\n\n      // try the request on available servers\n      for (const server of list) {\n        // build the request\n        const {\n          path, data, retry = true,\n        } = req;\n        const { id, base } = server;\n\n        let url, body;\n        if (method === 'GET') {\n          url = `${base}${path}${this.query(data)}`;\n        } else {\n          url = `${base}${path}`;\n          body = JSON.stringify(data);\n        }\n\n        console.debug(\n          'one-server',\n          'request url', JSON.stringify({\n            id, url, method, data,\n          }),\n        );\n\n        try {\n          const resp = await fetch(url, {\n            method,\n            body,\n          });\n\n          const { status } = resp;\n          const { key: currKey } = this;\n\n          // make sure the transaction key\n          // has changed in between\n          if (key !== currKey) {\n            handled = true;\n            // reject response\n            reject({\n              status: -1,\n            });\n\n            console.debug(\n              'one-server',\n              'ignored, keys do not match',\n              JSON.stringify({\n                id, url, key, currKey,\n              }),\n            );\n\n            if (this.gatewayError(status)) {\n              console.debug(\n                'one-server',\n                'ignored, keys do not match, gateway error',\n                JSON.stringify({\n                  id, url, key, currKey,\n                }),\n              );\n              // server not reachable\n              this.update(server, false);\n            } else {\n              // just mark the server active \n              this.update(server, true);\n            }\n          } else {\n            console.debug(\n              'one-server',\n              'accepted, keys match',\n              JSON.stringify({\n                id, url, key, currKey,\n              }),\n            );\n\n            if (this.gatewayError(status)) {\n              console.debug(\n                'one-server',\n                'accepted, keys match, gateway error',\n                JSON.stringify({\n                  id, url, key, currKey,\n                }),\n              );\n              // server not reachable\n              this.update(server, false);\n            } else {\n              handled = true;\n              this.update(server, true);\n\n              // extract the response\n              // TODO: add proper error handling\n              let data:any;\n              try {\n                data = await resp.json();\n              } catch (exp) {\n              }\n\n              // resolve the promise\n              if (resp.ok) {\n                let results:any = (data) && (data.results);\n                //For Screen Pop Code.\n                let code:any = (data) && (data.code);\n                //For Screen Pop Error and Any other Error's.\n                let error:any = (data) && (data.error);\n                const finalres = [results, code, error];\n                resolve(finalres);\n              } else {\n                const errors = (data) && (data.error);\n                reject({\n                  status, errors,\n                });\n\n                console.debug(\n                  'one-server',\n                  'request error',\n                  JSON.stringify({\n                    id, key, url, status, data,\n                  }),\n                );\n              }\n            }\n          }\n        } catch (error) {\n          // network/infrastructure error\n          // mark the server inactive \n          this.update(server, false);\n          if (!(retry)) {\n            // do not retry\n            break;\n          }\n        }\n\n        // break out of the loop\n        if (handled) {\n          // done\n          break;\n        }\n      }\n\n      if (!(handled)) {\n        // request was not handled\n        reject({\n          status: 0,\n          errors: [{\n            error_description: 'Unable to connect, server(s) not available'\n          }]\n        });\n      }\n    });\n  }\n\n  public get(req: Req): Promise<any> {\n    // make a GET request\n    return this.handle(req, 'GET');\n  }\n\n  public post(req: Req): Promise<any> {\n    // make a POST request\n    return this.handle(req, 'POST');\n  }\n}\n"]}},"error":null,"hash":"24f50ccfea68a866b8e0e5e23168e9a3","cacheData":{"env":{}}}
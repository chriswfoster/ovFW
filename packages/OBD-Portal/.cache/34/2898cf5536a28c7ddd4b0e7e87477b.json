{"id":"../../../node_modules/one-micro-patient/src/patient.tsx","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/tsconfig.json","includedInParent":true,"mtime":1569955866849},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/OBD-Portal/package.json","includedInParent":true,"mtime":1569955431018},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/package.json","includedInParent":true,"mtime":1569955866847},{"name":"react","loc":{"line":13,"column":33},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/react/index.js"},{"name":"react-redux","loc":{"line":14,"column":28},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/react-redux/es/index.js"},{"name":"one-ui-provider","loc":{"line":15,"column":32},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-ui-provider/index.ts"},{"name":"antd/lib/icon","loc":{"line":16,"column":37},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/icon/index.js"},{"name":"antd/lib/select","loc":{"line":17,"column":39},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/select/index.js"},{"name":"antd/lib/avatar","loc":{"line":18,"column":39},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/avatar/index.js"},{"name":"antd/lib/layout","loc":{"line":19,"column":39},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/layout/index.js"},{"name":"antd/lib/result","loc":{"line":20,"column":39},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/result/index.js"},{"name":"one-model-address","loc":{"line":21,"column":34},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-model-address/index.ts"},{"name":"one-core","loc":{"line":22,"column":25},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-core/index.ts"},{"name":"./patientmodal","loc":{"line":23,"column":29},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patientmodal.tsx"},{"name":"antd/lib/menu","loc":{"line":24,"column":37},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/menu/index.js"},{"name":"antd/lib/dropdown","loc":{"line":25,"column":41},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/dropdown/index.js"},{"name":"antd/lib/button","loc":{"line":26,"column":39},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/button/index.js"},{"name":"antd/lib/message","loc":{"line":27,"column":40},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/message/index.js"},{"name":"one-micro","loc":{"line":30,"column":26},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro-patient/src/patient.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro/index.ts"}],"generated":{"js":"\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = __importStar(require(\"react\"));\nvar react_redux_1 = require(\"react-redux\");\nvar one_ui_provider_1 = require(\"one-ui-provider\");\nvar icon_1 = __importDefault(require(\"antd/lib/icon\"));\nvar select_1 = __importDefault(require(\"antd/lib/select\"));\nvar avatar_1 = __importDefault(require(\"antd/lib/avatar\"));\nvar layout_1 = __importDefault(require(\"antd/lib/layout\"));\nvar result_1 = __importDefault(require(\"antd/lib/result\"));\nvar one_model_address_1 = require(\"one-model-address\");\nvar one_core_1 = require(\"one-core\");\nvar patientmodal_1 = require(\"./patientmodal\");\nvar menu_1 = __importDefault(require(\"antd/lib/menu\"));\nvar dropdown_1 = __importDefault(require(\"antd/lib/dropdown\"));\nvar button_1 = __importDefault(require(\"antd/lib/button\"));\nvar message_1 = __importDefault(require(\"antd/lib/message\"));\nvar Header = layout_1.default.Header, Footer = layout_1.default.Footer, Sider = layout_1.default.Sider, Content = layout_1.default.Content;\nvar Option = select_1.default.Option;\nvar one_micro_1 = require(\"one-micro\");\nfunction sortTime(date) {\n    if (date) {\n        var dateinfo = new Date(date);\n        var yyyy = dateinfo.getFullYear();\n        var mm = ((dateinfo.getMonth() + 1) < 10 ? '0' : '') + (dateinfo.getMonth() + 1);\n        var dd = (dateinfo.getDate() < 10 ? '0' : '') + dateinfo.getDate();\n        return (mm + \"-\" + dd + \"-\" + yyyy);\n    }\n}\nexports.Patient = function (props) {\n    var _a = one_ui_provider_1.useCtx(), settings = _a.settings, log = _a.log, agentId = _a.agentId;\n    var _b = settings.epic_config, epic_config = _b === void 0 ? {} : _b;\n    var location = epic_config.location, activityId = epic_config.activityId;\n    var dispatch = react_redux_1.useDispatch();\n    var _c = react_redux_1.useSelector(function (state) { return (state.patient || {}); }), patientdetails = _c.patientdetails, _d = _c.selected, patientvalue = _d === void 0 ? {} : _d;\n    var _e = react_redux_1.useSelector(function (state) { return (state.screenpop || {}); }), patientcardscreenpopactive = _e.patientcardscreenpopactive, patientcardscreenpopmsg = _e.patientcardscreenpopmsg, patientcardapptscreenpopactive = _e.patientcardapptscreenpopactive, patientcardapptscreenpopmsg = _e.patientcardapptscreenpopmsg;\n    if (patientcardscreenpopactive) {\n        if (patientcardscreenpopmsg && patientcardscreenpopmsg === 'Epic Screen pop to the Patient Chart is successfully initiated') {\n            message_1.default.success(patientcardscreenpopmsg);\n        }\n        else {\n            message_1.default.error(patientcardscreenpopmsg);\n        }\n        dispatch({\n            type: \"one-screenpop-reset\",\n            payload: {\n                patientcardscreenpopactive: false\n            }\n        });\n    }\n    if (patientcardapptscreenpopactive) {\n        if (patientcardapptscreenpopmsg && patientcardapptscreenpopmsg === 'Epic Screen pop to the Appointment Desk is successfully initiated') {\n            message_1.default.success(patientcardapptscreenpopmsg);\n        }\n        else {\n            message_1.default.error(patientcardapptscreenpopmsg);\n        }\n        dispatch({\n            type: \"one-screenpop-reset\",\n            payload: {\n                patientcardapptscreenpopactive: false\n            }\n        });\n    }\n    //  const patintdet = patientdetails || [];\n    //   let selectpatients = (\n    //     <Select style={{width: \"100%\" }} value={patientvalue.Name} onSelect={(key:string) => {\n    //       let index = patintdet.findIndex((pdetails: any) => pdetails.Name === key);\n    //       dispatch({\n    //         type: 'one-patients-select',\n    //         payload: patintdet[index],\n    //       })\n    //       // setActivePat();\n    //       // patientvalues=patintdet[index];\n    //     }\n    //     }>{\n    //         patintdet && patintdet.map((patient: any, index: number) => (\n    //           <Option key={index} data={patient} value={patient.Name}> {patient.Name} </Option>\n    //         ))\n    //       }\n    //     </Select>\n    //   );\n    log.debug('one-state-patients', 'patientUI', {\n        patientdetails: patientdetails\n    });\n    log.debug('one-state-patients', 'selected', {\n        patientvalue: patientvalue\n    });\n    var patientvalues = {\n        fname: patientvalue.FirstName,\n        lname: patientvalue.LastName,\n        gender: patientvalue.Sex,\n        name: patientvalue.Name,\n        dob: sortTime(patientvalue.DateOfBirth),\n        id: one_core_1.array(patientvalue.PatientID).find(function (id) { return (id['Type'] === \"MRN\"); }),\n        pidepi: one_core_1.array(patientvalue.PatientID).find(function (id) { return (id['Type'] === \"EPI\"); }),\n        addresses: one_core_1.array(patientvalue.Addresses).filter(function (a) { return (a.Type === 'Permanent'); }).map(function (a) { return (one_model_address_1.address(a)); }),\n    };\n    log.debug('one-state-patients', 'patient,patientconverted', {\n        patientvalues: patientvalues\n    });\n    function parseAddress(adress) {\n        var paddr = adress[0];\n        var addrstring = \"\";\n        if (paddr) {\n            if (paddr.street) {\n                addrstring = paddr.street;\n                // addrstring=addrstring.concat(\"\\n \");\n            }\n            if (paddr.city) {\n                addrstring = addrstring.concat(paddr.city);\n                // addrstring=addrstring.concat(\"\\n \");\n            }\n            if (paddr.state) {\n                addrstring = addrstring.concat(paddr.state);\n                // addrstring=addrstring.concat(\"\\n \");\n            }\n            if (paddr.country) {\n                addrstring = addrstring.concat(paddr.country);\n                // addrstring=addrstring.concat(\"\\n \");\n            }\n            if (paddr.zip) {\n                addrstring = addrstring.concat(paddr.zip);\n            }\n        }\n        console.log(\"--- paddress 3 \", addrstring);\n        return addrstring;\n    }\n    function getIntials(patient) {\n        var intials = \"\";\n        if (patient.fname) {\n            intials = patient.fname.charAt(0);\n        }\n        if (patient.lname) {\n            intials = patient.lname.charAt(0);\n        }\n        if (patient.fname) {\n            var fnamei = patient.fname.charAt(0);\n            intials = intials.concat(fnamei);\n        }\n        return intials;\n    }\n    // Check for the mlti match and show the patient selection screen\n    if ((patientvalue && Object.getOwnPropertyNames(patientvalue).length === 0) && (patientdetails && patientdetails.length > 0)) {\n        dispatch({\n            type: \"one-patient-drawer\",\n            payload: {\n                visible: true\n            }\n        });\n    }\n    // const EpicScreenpopup = cb => ((dispatch, getState) => {\n    //     const { config } = getState();\n    //     const { mrn, agentId, reqType } = cb;\n    //     const { service: { sideA, sideB, ScreenPop, ScrLocation } = {} } = config;\n    //     let getScreenpop = new Promise(function (resolve, reject) {\n    //         const url = `${sideA}${ScreenPop}${'?agentId='}${agentId}${'&location='}${ScrLocation}${'&patientId='}${mrn}${'&activityId='}${reqType}${'&eventType=Epic'}`;\n    //         //console.log(url);\n    //         axios.get(url).then(function (response) {\n    //             if (response && response.data) {\n    //                 console.log(\"screen pop up responce :\" + response.data.code);\n    //                 dispatch({\n    //                     type: 'BEGIN_NOTIFICATION',\n    //                     payload: {\n    //                         label: 'Success:',\n    //                         message: 'Screen pop sucessfully initiated',\n    //                         isEnabled: true\n    //                     },\n    //                 });\n    //             }\n    //         }).catch(function (error) {\n    //             const { response, request } = error;\n    //             if (response &&\n    //                 response.status !== 500\n    //                 &&\n    //                 response.status !== 504\n    //                 &&\n    //                 response.status !== 502) {\n    //                 dispatch({\n    //                     type: 'BEGIN_NOTIFICATION',\n    //                     payload: {\n    //                         label: 'Error :',\n    //                         message: 'Epic Screen pop failed. Please make sure you are connected to the Snap Adapter with your Cisco Finesse Agent ',\n    //                         isEnabled: true\n    //                     },\n    //                 });\n    //                 console.log(\"screen pop up responce :\" + response.status);\n    //             } else {\n    //                 reject('Error');\n    //             }\n    //         });\n    //     });\n    //     getScreenpop.then(function (result) { },\n    //         function (error) {\n    //             const url = `${sideB}${ScreenPop}${'?agentId='}${agentId}${'&location='}${ScrLocation}${'&patientId='}${mrn}${'&activityId='}${reqType}${'&eventType=Epic'}`;\n    //             console.log(url);\n    //             axios.get(url).then(function (response) {\n    //                 if (response && response.data) {\n    //                     console.log(\"screen pop up responce :\" + response.data.code);\n    //                     dispatch({\n    //                         type: 'BEGIN_NOTIFICATION',\n    //                         payload: {\n    //                             label: 'Success :',\n    //                             message: 'Screen pop sucessfully initiated',\n    //                             isEnabled: true\n    //                         },\n    //                     });\n    //                 }\n    //             }).catch(function (error) {\n    //                 const { response, request } = error;\n    //                 if (response &&\n    //                     response.status !== 500\n    //                     &&\n    //                     response.status !== 504\n    //                     &&\n    //                     response.status !== 502) {\n    //                     dispatch({\n    //                         type: 'BEGIN_NOTIFICATION',\n    //                         payload: {\n    //                             label: 'Error :',\n    //                             message: 'Epic Screen pop failed. Please make sure you are connected to the Snap Adapter with your Cisco Finesse Agent ',\n    //                             isEnabled: true\n    //                         },\n    //                     });\n    //                 } else {\n    //                     dispatch({\n    //                         type: 'BEGIN_NOTIFICATION',\n    //                         payload: {\n    //                             label: 'Error :',\n    //                             message: 'Data server down.Please try again',\n    //                             isEnabled: true\n    //                         },\n    //                     });\n    //                 }\n    //             });\n    //         });\n    // });\n    var handlePatientScreenPopClick = function () {\n        var patientid = patientvalues.pidepi && patientvalues.pidepi.ID;\n        dispatch({\n            type: 'one-screenpop-get',\n            payload: {\n                agentId: agentId,\n                location: location,\n                activityId: activityId,\n                patientid: patientid\n            }\n        });\n    };\n    var handleApptScreenPopClick = function () {\n        var patientid = patientvalues.pidepi && patientvalues.pidepi.ID;\n        dispatch({\n            type: 'one-patient-appointment-screenpop-get',\n            payload: {\n                agentId: agentId,\n                location: location,\n                activityId: 'ES_APPT_DESK_WEB',\n                patientid: patientid\n            }\n        });\n    };\n    var menu = (React.createElement(menu_1.default, null,\n        React.createElement(menu_1.default.Item, { key: \"1\", onClick: handlePatientScreenPopClick }, \" Patient Chart\"),\n        React.createElement(menu_1.default.Item, { key: \"2\", onClick: handleApptScreenPopClick }, \" Appointment Desk\")));\n    var realUI = (React.createElement(\"div\", null));\n    if ((patientdetails && patientdetails.length > 0) || (patientvalues && patientvalues.name && patientvalues.dob)) {\n        var matchescount = 0;\n        matchescount = patientdetails ? patientdetails.length : 0;\n        var pname = (patientvalues.name) ? patientvalues.name : '';\n        var patientname = \"\";\n        patientname = pname;\n        // Code for if patient name is greater than 16 chars then spliting name into two.\n        // if(pname.length >= 16){\n        //     let name = pname.split(',');\n        //     patientname = array(name).map((v: any, index) => (\n        //         <>\n        //             {(index > 0) ? '' : ''}\n        //             {v}\n        //         </>\n        //     ));\n        // }else{\n        //     patientname = pname;\n        // }\n        realUI = (React.createElement(React.Fragment, null,\n            React.createElement(patientmodal_1.PatientModal, null),\n            React.createElement(\"div\", null),\n            React.createElement(\"div\", { style: {\n                    display: 'flex',\n                    flexDirection: 'row',\n                    // flexWrap: 'wrap',\n                    padding: '15px',\n                    justifyContent: 'space-between'\n                } },\n                React.createElement(\"span\", { style: {\n                    //  marginRight: \"25px\",\n                    //  display: \"inline-block\",\n                    //  verticalAlign: \"top\",\n                    //  minWidth: \"115px\",\n                    //  marginTop: \"-40px\"\n                    } },\n                    React.createElement(\"p\", { style: {\n                            marginBottom: \"1.25rem\",\n                            fontSize: \"0.75rem\",\n                            marginRight: \"5px\"\n                        } },\n                        React.createElement(avatar_1.default, { shape: \"circle\", size: 90, style: { backgroundColor: '#4396CF' } },\n                            \" \",\n                            getIntials(patientvalues),\n                            \" \")),\n                    React.createElement(\"p\", { style: {\n                            marginBottom: \"0.75rem\",\n                            fontSize: \"0.75rem\",\n                            marginRight: \"5px\"\n                        } },\n                        React.createElement(dropdown_1.default, { overlay: menu },\n                            React.createElement(button_1.default, { type: \"primary\", size: \"small\" },\n                                \"ScreenPop\",\n                                React.createElement(icon_1.default, { type: \"down\" })))),\n                    React.createElement(\"p\", { style: {\n                            marginBottom: \".25rem\",\n                            fontSize: \"0.75rem\",\n                            marginRight: \"5px\"\n                        } },\n                        React.createElement(button_1.default, { type: \"primary\", size: \"small\", onClick: function () {\n                                dispatch({\n                                    type: \"one-patient-drawer\",\n                                    payload: {\n                                        visible: true\n                                    }\n                                });\n                            } },\n                            \"Matches (\",\n                            matchescount,\n                            \")\"))),\n                React.createElement(\"div\", { style: {\n                        display: 'flex',\n                        flexDirection: 'column',\n                        width: '70%'\n                    } },\n                    React.createElement(\"p\", { style: {\n                            marginBottom: \".25rem\",\n                            fontSize: \"0.75rem\"\n                        } },\n                        React.createElement(one_micro_1.NV, { name: 'Name', value: patientname })),\n                    React.createElement(\"div\", { style: {\n                            display: 'flex',\n                            flexDirection: 'row',\n                            flexWrap: 'wrap',\n                            justifyContent: 'space-between'\n                        } },\n                        React.createElement(\"span\", { style: {\n                            //  display: \"inline-block\",\n                            //  verticalAlign: \"top\",\n                            //  minWidth: \"105px\",\n                            // display: 'flex',\n                            // flexDirection: 'row',\n                            // flexWrap: 'wrap',\n                            // justifyContent: 'space-between'\n                            } },\n                            React.createElement(\"p\", { style: {\n                                    marginBottom: \".25rem\",\n                                    fontSize: \".75rem\",\n                                } },\n                                React.createElement(one_micro_1.NV, { name: 'MRN', value: patientvalues.id && patientvalues.id.ID })),\n                            React.createElement(\"p\", { style: {\n                                    marginBottom: \".25rem\",\n                                    fontSize: \".75rem\",\n                                } },\n                                React.createElement(one_micro_1.NV, { name: 'DOB', value: patientvalues.dob })),\n                            React.createElement(\"p\", { style: {\n                                    marginBottom: \".25rem\",\n                                    fontSize: \".75rem\"\n                                } },\n                                React.createElement(one_micro_1.NV, { name: 'Gender', value: patientvalues.gender }))),\n                        React.createElement(\"span\", { style: {\n                            //  margin: \"0px\",\n                            //  display: \"inline-block\",\n                            //  verticalAlign: \"top\",\n                            //  minWidth: \"166px\"\n                            } },\n                            React.createElement(\"p\", { style: {\n                                    marginBottom: \".25rem\",\n                                    fontSize: \".75rem\"\n                                } },\n                                React.createElement(one_micro_1.NV, { name: 'Phone', value: patientvalues.addresses && patientvalues.addresses[0] && patientvalues.addresses[0].phones && patientvalues.addresses[0].phones[0].num })),\n                            React.createElement(\"p\", { style: {\n                                    marginBottom: \".25rem\",\n                                    fontSize: \".75rem\"\n                                } },\n                                React.createElement(one_micro_1.NV, { name: 'Address', value: patientvalues.addresses && parseAddress(patientvalues.addresses) }))))))));\n    }\n    else {\n        if (patientdetails && patientdetails.length == 0) {\n            realUI = (React.createElement(\"div\", { style: { textAlign: \"left\", lineHeight: \"22px\" } },\n                React.createElement(result_1.default, { status: \"warning\", title: \"No Match Found.\" })));\n        }\n        else {\n            realUI = (React.createElement(\"div\", { style: { textAlign: \"left\", lineHeight: \"22px\" } }));\n        }\n    }\n    return (React.createElement(React.Fragment, null, realUI));\n};\n"},"sourceMaps":{"js":{"version":3,"file":"patient.js","sourceRoot":"","sources":["../../../node_modules/one-micro-patient/src/patient.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAA+B;AAC/B,2CAAsD;AAEtD,mDAAyC;AAGzC,uDAAiC;AAEjC,2DAAqC;AACrC,2DAAqC;AACrC,2DAAsC;AACtC,2DAAqC;AAErC,uDAA4C;AAC5C,qCAAiC;AACjC,+CAA8C;AAE9C,uDAAiC;AACjC,+DAAyC;AACzC,2DAAqC;AAGrC,6DAAuC;AAK/B,IAAA,gCAAM,EAAE,gCAAM,EAAE,8BAAK,EAAE,kCAAO,CAAY;AAE1C,IAAA,gCAAM,CAAY;AAE1B,uCAA+B;AAI/B,SAAS,QAAQ,CAAC,IAAQ;IAEtB,IAAG,IAAI,EACT;QACI,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,IAAI,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QAClC,IAAI,EAAE,GAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QAChF,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;QACnE,OAAO,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;KACvC;AACH,CAAC;AAEY,QAAA,OAAO,GAAG,UAAC,KAAY;IAC1B,IAAA,+BAAoC,EAAlC,sBAAQ,EAAC,YAAG,EAAE,oBAAoB,CAAC;IACnC,IAAA,yBAAgB,EAAhB,qCAAgB,CAAc;IAC9B,IAAA,+BAAQ,EAAE,mCAAU,CAAiB;IAC7C,IAAO,QAAQ,GAAG,yBAAW,EAAE,CAAC;IAC1B,IAAA,kFAEF,EAFI,kCAAc,EAAE,gBAA2B,EAA3B,sCAEpB,CAAC;IAEC,IAAA,oFAKF,EALI,0DAA0B,EAC7B,oDAAuB,EACvB,kEAA8B,EAC9B,4DAED,CAAC;IAEL,IAAG,0BAA0B,EAAC;QAC1B,IAAG,uBAAuB,IAAI,uBAAuB,KAAK,gEAAgE,EAAC;YACvH,iBAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;SAC5C;aAAI;YACD,iBAAO,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QAED,QAAQ,CAAC;YACL,IAAI,EAAC,qBAAqB;YAC1B,OAAO,EAAG;gBACN,0BAA0B,EAAE,KAAK;aACpC;SACJ,CAAC,CAAA;KACJ;IAED,IAAG,8BAA8B,EAAC;QAC/B,IAAG,2BAA2B,IAAI,2BAA2B,KAAK,mEAAmE,EAAC;YAClI,iBAAO,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;SAChD;aAAI;YACD,iBAAO,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC9C;QAED,QAAQ,CAAC;YACL,IAAI,EAAC,qBAAqB;YAC1B,OAAO,EAAG;gBACN,8BAA8B,EAAE,KAAK;aACxC;SACJ,CAAC,CAAA;KACJ;IAEF,2CAA2C;IAC3C,2BAA2B;IAC3B,6FAA6F;IAC7F,mFAAmF;IACnF,mBAAmB;IACnB,uCAAuC;IACvC,qCAAqC;IACrC,WAAW;IACX,2BAA2B;IAC3B,2CAA2C;IAC3C,QAAQ;IAER,UAAU;IACV,wEAAwE;IACxE,8FAA8F;IAC9F,aAAa;IACb,UAAU;IACV,gBAAgB;IAChB,OAAO;IAEL,GAAG,CAAC,KAAK,CACP,oBAAoB,EACpB,WAAW,EAAE;QACT,cAAc,gBAAA;KACjB,CACJ,CAAC;IACF,GAAG,CAAC,KAAK,CACL,oBAAoB,EACpB,UAAU,EAAE;QACR,YAAY,cAAA;KACf,CACJ,CAAC;IACH,IAAK,aAAa,GAAC;QACd,KAAK,EAAC,YAAY,CAAC,SAAS;QAC5B,KAAK,EAAE,YAAY,CAAC,QAAQ;QAC5B,MAAM,EAAC,YAAY,CAAC,GAAG;QACvB,IAAI,EAAG,YAAY,CAAC,IAAI;QACxB,GAAG,EAAE,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC;QACvC,EAAE,EAAE,gBAAK,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAC,EAAO,IAAK,OAAA,CAChD,EAAE,CAAC,MAAM,CAAC,KAAK,KAAK,CACvB,EAFmD,CAEnD,CAAC;QACF,MAAM,EAAE,gBAAK,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAC,EAAO,IAAK,OAAA,CACpD,EAAE,CAAC,MAAM,CAAC,KAAK,KAAK,CACvB,EAFuD,CAEvD,CAAC;QACF,SAAS,EAAE,gBAAK,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,UAAC,CAAM,IAAK,OAAA,CACxD,CAAC,CAAC,IAAI,KAAK,WAAW,CACzB,EAF2D,CAE3D,CAAC,CAAC,GAAG,CAAC,UAAC,CAAM,IAAK,OAAA,CACf,2BAAO,CACH,CAAC,CACJ,CACJ,EAJkB,CAIlB,CAAC;KACF,CAAC;IAGN,GAAG,CAAC,KAAK,CACR,oBAAoB,EACpB,0BAA0B,EAAE;QACxB,aAAa,eAAA;KAChB,CACJ,CAAC;IAGF,SAAS,YAAY,CAAC,MAAU;QAC5B,IAAI,KAAK,GAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,UAAU,GAAC,EAAE,CAAC;QAClB,IAAG,KAAK,EAAE;YACN,IAAI,KAAK,CAAC,MAAM,EAAC;gBACb,UAAU,GAAC,KAAK,CAAC,MAAM,CAAC;gBACxB,uCAAuC;aAC1C;YAED,IAAG,KAAK,CAAC,IAAI,EAAC;gBACV,UAAU,GAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACzC,uCAAuC;aAC1C;YACD,IAAG,KAAK,CAAC,KAAK,EAAC;gBACX,UAAU,GAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1C,uCAAuC;aAC1C;YACD,IAAG,KAAK,CAAC,OAAO,EAAC;gBACb,UAAU,GAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC5C,uCAAuC;aAC1C;YACD,IAAG,KAAK,CAAC,GAAG,EAAC;gBACT,UAAU,GAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAE3C;SACJ;QACD,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAC,UAAU,CAAC,CAAC;QAC1C,OAAO,UAAU,CAAC;IACtB,CAAC;IAGD,SAAS,UAAU,CAAC,OAAO;QACvB,IAAI,OAAO,GAAC,EAAE,CAAC;QACf,IAAG,OAAO,CAAC,KAAK,EAAC;YACjB,OAAO,GAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAC/B;QACD,IAAG,OAAO,CAAC,KAAK,EAAC;YACb,OAAO,GAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAEnC;QACD,IAAG,OAAO,CAAC,KAAK,EAAC;YACb,IAAI,MAAM,GAAE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YACnC,OAAO,GAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC9B;QACL,OAAO,OAAO,CAAC;IACnB,CAAC;IAGG,iEAAiE;IACjE,IAAI,CAAC,YAAY,IAAI,MAAM,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,cAAc,CAAC,MAAM,GAAC,CAAC,CAAC,EAAC;QACnH,QAAQ,CAAC;YACJ,IAAI,EAAC,oBAAoB;YACzB,OAAO,EAAG;gBACP,OAAO,EAAE,IAAI;aACf;SACL,CAAC,CAAA;KACT;IAED,2DAA2D;IAC3D,qCAAqC;IACrC,4CAA4C;IAC5C,iFAAiF;IACjF,kEAAkE;IAClE,wKAAwK;IACxK,8BAA8B;IAE9B,oDAAoD;IAEpD,+CAA+C;IAC/C,gFAAgF;IAChF,6BAA6B;IAC7B,kDAAkD;IAClD,iCAAiC;IACjC,6CAA6C;IAC7C,uEAAuE;IACvE,0CAA0C;IAC1C,yBAAyB;IACzB,sBAAsB;IACtB,gBAAgB;IAChB,sCAAsC;IACtC,mDAAmD;IACnD,8BAA8B;IAC9B,0CAA0C;IAC1C,qBAAqB;IACrB,0CAA0C;IAC1C,qBAAqB;IACrB,6CAA6C;IAC7C,6BAA6B;IAC7B,kDAAkD;IAClD,iCAAiC;IACjC,4CAA4C;IAC5C,oJAAoJ;IACpJ,0CAA0C;IAC1C,yBAAyB;IACzB,sBAAsB;IACtB,6EAA6E;IAE7E,uBAAuB;IACvB,mCAAmC;IAEnC,gBAAgB;IAEhB,cAAc;IAEd,UAAU;IACV,+CAA+C;IAC/C,6BAA6B;IAC7B,4KAA4K;IAC5K,gCAAgC;IAChC,wDAAwD;IAExD,mDAAmD;IACnD,oFAAoF;IACpF,iCAAiC;IACjC,sDAAsD;IACtD,qCAAqC;IACrC,kDAAkD;IAClD,2EAA2E;IAC3E,8CAA8C;IAC9C,6BAA6B;IAC7B,0BAA0B;IAC1B,oBAAoB;IACpB,0CAA0C;IAE1C,uDAAuD;IACvD,kCAAkC;IAClC,8CAA8C;IAC9C,yBAAyB;IACzB,8CAA8C;IAC9C,yBAAyB;IACzB,iDAAiD;IACjD,iCAAiC;IACjC,sDAAsD;IACtD,qCAAqC;IACrC,gDAAgD;IAChD,wJAAwJ;IACxJ,8CAA8C;IAC9C,6BAA6B;IAC7B,0BAA0B;IAG1B,2BAA2B;IAC3B,iCAAiC;IACjC,sDAAsD;IACtD,qCAAqC;IACrC,gDAAgD;IAChD,4EAA4E;IAC5E,8CAA8C;IAC9C,6BAA6B;IAC7B,0BAA0B;IAC1B,oBAAoB;IAEpB,kBAAkB;IAClB,cAAc;IACd,MAAM;IAEN,IAAM,2BAA2B,GAAG;QAEjC,IAAI,SAAS,GAAG,aAAa,CAAC,MAAM,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE,CAAA;QAC/D,QAAQ,CAAC;YACJ,IAAI,EAAE,mBAAmB;YACzB,OAAO,EAAC;gBACJ,OAAO,EAAE,OAAO;gBAChB,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,UAAU;gBACtB,SAAS,EAAE,SAAS;aACvB;SACL,CAAC,CAAC;IAEN,CAAC,CAAA;IAED,IAAM,wBAAwB,GAAG;QAE9B,IAAI,SAAS,GAAG,aAAa,CAAC,MAAM,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE,CAAA;QAC/D,QAAQ,CAAC;YACJ,IAAI,EAAE,uCAAuC;YAC7C,OAAO,EAAC;gBACJ,OAAO,EAAE,OAAO;gBAChB,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,kBAAkB;gBAC9B,SAAS,EAAE,SAAS;aACvB;SACL,CAAC,CAAC;IACN,CAAC,CAAA;IAED,IAAM,IAAI,GAAG,CACT,oBAAC,cAAI;QACH,oBAAC,cAAI,CAAC,IAAI,IAAC,GAAG,EAAC,GAAG,EAAC,OAAO,EAAE,2BAA2B,qBAA4B;QACnF,oBAAC,cAAI,CAAC,IAAI,IAAC,GAAG,EAAC,GAAG,EAAC,OAAO,EAAE,wBAAwB,wBAA+B,CAC9E,CACV,CAAA;IAID,IAAI,MAAM,GAAG,CACT,gCAAW,CACd,CAAA;IAED,IAAI,CAAC,cAAc,IAAI,cAAc,CAAC,MAAM,GAAC,CAAC,CAAC,IAAK,CAAC,aAAa,IAAI,aAAa,CAAC,IAAI,IAAI,aAAa,CAAC,GAAG,CAAC,EAAG;QAC7G,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,YAAY,GAAG,cAAc,CAAA,CAAC,CAAA,cAAc,CAAC,MAAM,CAAA,CAAC,CAAA,CAAC,CAAC;QACtD,IAAI,KAAK,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA,CAAC,CAAA,aAAa,CAAC,IAAI,CAAA,CAAC,CAAA,EAAE,CAAC;QACvD,IAAI,WAAW,GAAQ,EAAE,CAAC;QAC1B,WAAW,GAAG,KAAK,CAAC;QACpB,iFAAiF;QACjF,0BAA0B;QAC1B,mCAAmC;QACnC,yDAAyD;QACzD,aAAa;QACb,sCAAsC;QACtC,kBAAkB;QAClB,cAAc;QACd,UAAU;QACV,SAAS;QACT,2BAA2B;QAC3B,IAAI;QACJ,MAAM,GAAG,CACL;YACQ,oBAAC,2BAAY,OAAG;YAoExB,gCAoBM;YACN,6BAAK,KAAK,EAAE;oBACR,OAAO,EAAE,MAAM;oBACf,aAAa,EAAE,KAAK;oBACpB,oBAAoB;oBACpB,OAAO,EAAE,MAAM;oBACf,cAAc,EAAE,eAAe;iBAClC;gBACQ,8BACI,KAAK,EAAE;oBACJ,wBAAwB;oBACxB,4BAA4B;oBAC5B,yBAAyB;oBACzB,sBAAsB;oBACtB,sBAAsB;qBAExB;oBAEL,2BACQ,KAAK,EAAE;4BACH,YAAY,EAAE,SAAS;4BACvB,QAAQ,EAAE,SAAS;4BACnB,WAAW,EAAC,KAAK;yBACpB;wBAEN,oBAAC,gBAAM,IAAC,KAAK,EAAC,QAAQ,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAC,eAAe,EAAE,SAAS,EAAC;;4BAAI,UAAU,CAAC,aAAa,CAAC;gCAAY,CAC7G;oBACH,2BACQ,KAAK,EAAE;4BACH,YAAY,EAAE,SAAS;4BACvB,QAAQ,EAAE,SAAS;4BACnB,WAAW,EAAC,KAAK;yBACpB;wBAED,oBAAC,kBAAQ,IAAC,OAAO,EAAE,IAAI;4BACpB,oBAAC,gBAAM,IAAC,IAAI,EAAC,SAAS,EAAC,IAAI,EAAC,OAAO;;gCACtB,oBAAC,cAAI,IAAC,IAAI,EAAC,MAAM,GAAE,CACvB,CACD,CACjB;oBACJ,2BACU,KAAK,EAAE;4BACH,YAAY,EAAE,QAAQ;4BACtB,QAAQ,EAAE,SAAS;4BACnB,WAAW,EAAC,KAAK;yBACpB;wBAED,oBAAC,gBAAM,IAAC,IAAI,EAAC,SAAS,EAAC,IAAI,EAAC,OAAO,EAAC,OAAO,EAAG;gCACvC,QAAQ,CAAC;oCACL,IAAI,EAAC,oBAAoB;oCACzB,OAAO,EAAG;wCACP,OAAO,EAAE,IAAI;qCACf;iCACR,CAAC,CAAA;4BAAA,CAAC;;4BAAa,YAAY;gCAAW,CAChD,CACK;gBACP,6BAAK,KAAK,EAAE;wBACR,OAAO,EAAE,MAAM;wBACf,aAAa,EAAE,QAAQ;wBACvB,KAAK,EAAE,KAAK;qBACf;oBACE,2BACY,KAAK,EAAE;4BACH,YAAY,EAAE,QAAQ;4BACtB,QAAQ,EAAE,SAAS;yBACtB;wBAGD,oBAAC,cAAE,IAAC,IAAI,EAAC,MAAM,EAAC,KAAK,EAAE,WAAW,GAAI,CAC1C;oBACJ,6BAAK,KAAK,EAAE;4BACR,OAAO,EAAE,MAAM;4BACf,aAAa,EAAE,KAAK;4BACpB,QAAQ,EAAE,MAAM;4BAChB,cAAc,EAAE,eAAe;yBAClC;wBACD,8BACA,KAAK,EAAE;4BACH,4BAA4B;4BAC5B,yBAAyB;4BACzB,sBAAsB;4BACtB,mBAAmB;4BACnB,wBAAwB;4BACxB,oBAAoB;4BACpB,kCAAkC;6BACrC;4BAGD,2BACI,KAAK,EAAE;oCACH,YAAY,EAAE,QAAQ;oCACtB,QAAQ,EAAE,QAAQ;iCACrB;gCAED,oBAAC,cAAE,IAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAE,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,CAAC,EAAE,GAAI,CACzE;4BAAA,2BACQ,KAAK,EAAE;oCACH,YAAY,EAAE,QAAQ;oCACtB,QAAQ,EAAE,QAAQ;iCACrB;gCAED,oBAAC,cAAE,IAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAE,aAAa,CAAC,GAAG,GAAI,CACnD;4BACI,2BACI,KAAK,EAAE;oCACH,YAAY,EAAE,QAAQ;oCACtB,QAAQ,EAAE,QAAQ;iCACrB;gCAED,oBAAC,cAAE,IAAC,IAAI,EAAC,QAAQ,EAAC,KAAK,EAAE,aAAa,CAAC,MAAM,GAAI,CACzD,CAEO;wBACP,8BACI,KAAK,EAAE;4BACH,kBAAkB;4BAClB,4BAA4B;4BAC5B,yBAAyB;4BACzB,qBAAqB;6BACxB;4BAED,2BACI,KAAK,EAAE;oCACH,YAAY,EAAE,QAAQ;oCACtB,QAAQ,EAAE,QAAQ;iCACrB;gCAED,oBAAC,cAAE,IAAC,IAAI,EAAC,OAAO,EAAC,KAAK,EAAE,aAAa,CAAC,SAAS,IAAI,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,GAAI,CAC1K;4BACI,2BACI,KAAK,EAAE;oCACH,YAAY,EAAE,QAAQ;oCACtB,QAAQ,EAAE,QAAQ;iCACrB;gCAGD,oBAAC,cAAE,IAAC,IAAI,EAAC,SAAS,EAAC,KAAK,EAAE,aAAa,CAAC,SAAS,IAAI,YAAY,CAAC,aAAa,CAAC,SAAS,CAAC,GAAK,CAC/F,CACD,CACG,CACP,CACR,CACJ,CACN,CAAC;KACL;SAAM;QACC,IAAG,cAAc,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC,EAAC;YAC5C,MAAM,GAAG,CACL,6BAAK,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE;gBACjD,oBAAC,gBAAM,IACT,MAAM,EAAC,SAAS,EAChB,KAAK,EAAC,iBAAiB,GAEvB,CACM,CACP,CAAC;SACT;aAAM;YACH,MAAM,GAAG,CACL,6BAAK,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,GAC7C,CACP,CAAC;SACT;KAER;IAED,OAAO,CACH,0CACC,MAAM,CAoIJ,CACN,CAAC;AACN,CAAC,CAAC","sourcesContent":["import * as React from \"react\";\nimport { useDispatch,useSelector } from \"react-redux\";\n\nimport { useCtx } from \"one-ui-provider\";\nimport Row from \"antd/lib/row\";\nimport Col from \"antd/lib/col\";\nimport Icon from \"antd/lib/icon\";\nimport { patient} from \"one-modal-patient\";\nimport Select from \"antd/lib/select\";\nimport Avatar from \"antd/lib/avatar\";\nimport  Layout from 'antd/lib/layout';\nimport Result from \"antd/lib/result\";\n\nimport { address } from 'one-model-address';\nimport { array } from 'one-core';\nimport { PatientModal } from \"./patientmodal\";\nimport { parse } from 'one-format-date';\nimport Menu from \"antd/lib/menu\";\nimport Dropdown from \"antd/lib/dropdown\";\nimport Button from \"antd/lib/button\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\nimport message from 'antd/lib/message';\n\n\n\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst { Option } = Select;\n\nimport { NV } from 'one-micro';\n\ninterface Props {\n}\nfunction sortTime(date:any)\n{\n    if(date)\n  {\n      let dateinfo = new Date(date);\n      let yyyy = dateinfo.getFullYear();\n      let mm =((dateinfo.getMonth() + 1) < 10 ? '0' : '') + (dateinfo.getMonth() + 1);\n      let dd = (dateinfo.getDate() < 10 ? '0' : '') + dateinfo.getDate();\n      return (mm + \"-\" + dd + \"-\" + yyyy);\n  }\n}\n\nexport const Patient = (props: Props) => {\n    const { settings,log, agentId } = useCtx();\n    const { epic_config = {} } = settings;\n    const { location, activityId } = epic_config;\n    const  dispatch  =useDispatch();\n    const { patientdetails, selected: patientvalue = {} } = useSelector((state: any) => (\n        state.patient || {}\n      ));\n\n    const { patientcardscreenpopactive,\n         patientcardscreenpopmsg,\n         patientcardapptscreenpopactive,\n         patientcardapptscreenpopmsg } = useSelector((state: any) => (\n        state.screenpop || {}\n      ));\n\n    if(patientcardscreenpopactive){\n        if(patientcardscreenpopmsg && patientcardscreenpopmsg === 'Epic Screen pop to the Patient Chart is successfully initiated'){\n            message.success(patientcardscreenpopmsg);\n        }else{\n            message.error(patientcardscreenpopmsg);\n        }\n        \n        dispatch({\n            type:\"one-screenpop-reset\",\n            payload : {\n                patientcardscreenpopactive: false\n            }\n        })\n     }\n     \n     if(patientcardapptscreenpopactive){\n        if(patientcardapptscreenpopmsg && patientcardapptscreenpopmsg === 'Epic Screen pop to the Appointment Desk is successfully initiated'){\n            message.success(patientcardapptscreenpopmsg);\n        }else{\n            message.error(patientcardapptscreenpopmsg);\n        }\n        \n        dispatch({\n            type:\"one-screenpop-reset\",\n            payload : {\n                patientcardapptscreenpopactive: false\n            }\n        })\n     } \n      \n    //  const patintdet = patientdetails || [];\n    //   let selectpatients = (\n    //     <Select style={{width: \"100%\" }} value={patientvalue.Name} onSelect={(key:string) => {\n    //       let index = patintdet.findIndex((pdetails: any) => pdetails.Name === key);\n    //       dispatch({\n    //         type: 'one-patients-select',\n    //         payload: patintdet[index],\n    //       })\n    //       // setActivePat();\n    //       // patientvalues=patintdet[index];\n    //     }\n\n    //     }>{\n    //         patintdet && patintdet.map((patient: any, index: number) => (\n    //           <Option key={index} data={patient} value={patient.Name}> {patient.Name} </Option>\n    //         ))\n    //       }\n    //     </Select>\n    //   );\n\n      log.debug(\n        'one-state-patients',\n        'patientUI', {\n            patientdetails\n        }\n    );\n    log.debug(\n        'one-state-patients',\n        'selected', {\n            patientvalue\n        }\n    );\n   let  patientvalues={\n        fname:patientvalue.FirstName,\n        lname: patientvalue.LastName,\n        gender:patientvalue.Sex,\n        name : patientvalue.Name,\n        dob: sortTime(patientvalue.DateOfBirth),\n        id: array(patientvalue.PatientID).find((id: any) => (\n            id['Type'] === \"MRN\"\n        )),\n        pidepi: array(patientvalue.PatientID).find((id: any) => (\n            id['Type'] === \"EPI\"\n        )),\n        addresses: array(patientvalue.Addresses).filter((a: any) => (\n            a.Type === 'Permanent'\n        )).map((a: any) => (\n            address(\n                a,\n            )\n        )),\n       };\n\n\n   log.debug(\n    'one-state-patients',\n    'patient,patientconverted', {\n        patientvalues\n    }\n);\n\n\nfunction parseAddress(adress:any) {\n    let paddr=adress[0];\n    let addrstring=\"\";\n    if(paddr) {\n        if( paddr.street){\n            addrstring=paddr.street;\n            // addrstring=addrstring.concat(\"\\n \");\n        }\n\n        if(paddr.city){\n            addrstring=addrstring.concat(paddr.city);\n            // addrstring=addrstring.concat(\"\\n \");\n        }\n        if(paddr.state){\n            addrstring=addrstring.concat(paddr.state);\n            // addrstring=addrstring.concat(\"\\n \");\n        }\n        if(paddr.country){\n            addrstring=addrstring.concat(paddr.country);\n            // addrstring=addrstring.concat(\"\\n \");\n        }\n        if(paddr.zip){\n            addrstring=addrstring.concat(paddr.zip);\n\n        }\n    }\n    console.log(\"--- paddress 3 \",addrstring);\n    return addrstring;\n}\n\n\nfunction getIntials(patient){\n    let intials=\"\";\n    if(patient.fname){\n    intials=patient.fname.charAt(0);\n    }\n    if(patient.lname){\n        intials=patient.lname.charAt(0);\n\n    }\n    if(patient.fname){\n        let fnamei =patient.fname.charAt(0)\n        intials=intials.concat(fnamei);\n        }\n    return intials;\n}\n\n\n    // Check for the mlti match and show the patient selection screen\n    if( (patientvalue && Object.getOwnPropertyNames(patientvalue).length === 0) && (patientdetails && patientdetails.length>0)){\n            dispatch({\n                 type:\"one-patient-drawer\",\n                 payload : {\n                    visible: true\n                 }\n            })\n    }\n\n    // const EpicScreenpopup = cb => ((dispatch, getState) => {\n    //     const { config } = getState();\n    //     const { mrn, agentId, reqType } = cb;\n    //     const { service: { sideA, sideB, ScreenPop, ScrLocation } = {} } = config;\n    //     let getScreenpop = new Promise(function (resolve, reject) {\n    //         const url = `${sideA}${ScreenPop}${'?agentId='}${agentId}${'&location='}${ScrLocation}${'&patientId='}${mrn}${'&activityId='}${reqType}${'&eventType=Epic'}`;\n    //         //console.log(url);\n    \n    //         axios.get(url).then(function (response) {\n    \n    //             if (response && response.data) {\n    //                 console.log(\"screen pop up responce :\" + response.data.code);\n    //                 dispatch({\n    //                     type: 'BEGIN_NOTIFICATION',\n    //                     payload: {\n    //                         label: 'Success:',\n    //                         message: 'Screen pop sucessfully initiated',\n    //                         isEnabled: true\n    //                     },\n    //                 });\n    //             }\n    //         }).catch(function (error) {\n    //             const { response, request } = error;\n    //             if (response &&\n    //                 response.status !== 500\n    //                 &&\n    //                 response.status !== 504\n    //                 &&\n    //                 response.status !== 502) {\n    //                 dispatch({\n    //                     type: 'BEGIN_NOTIFICATION',\n    //                     payload: {\n    //                         label: 'Error :',\n    //                         message: 'Epic Screen pop failed. Please make sure you are connected to the Snap Adapter with your Cisco Finesse Agent ',\n    //                         isEnabled: true\n    //                     },\n    //                 });\n    //                 console.log(\"screen pop up responce :\" + response.status);\n    \n    //             } else {\n    //                 reject('Error');\n    \n    //             }\n    \n    //         });\n    \n    //     });\n    //     getScreenpop.then(function (result) { },\n    //         function (error) {\n    //             const url = `${sideB}${ScreenPop}${'?agentId='}${agentId}${'&location='}${ScrLocation}${'&patientId='}${mrn}${'&activityId='}${reqType}${'&eventType=Epic'}`;\n    //             console.log(url);\n    //             axios.get(url).then(function (response) {\n    \n    //                 if (response && response.data) {\n    //                     console.log(\"screen pop up responce :\" + response.data.code);\n    //                     dispatch({\n    //                         type: 'BEGIN_NOTIFICATION',\n    //                         payload: {\n    //                             label: 'Success :',\n    //                             message: 'Screen pop sucessfully initiated',\n    //                             isEnabled: true\n    //                         },\n    //                     });\n    //                 }\n    //             }).catch(function (error) {\n    \n    //                 const { response, request } = error;\n    //                 if (response &&\n    //                     response.status !== 500\n    //                     &&\n    //                     response.status !== 504\n    //                     &&\n    //                     response.status !== 502) {\n    //                     dispatch({\n    //                         type: 'BEGIN_NOTIFICATION',\n    //                         payload: {\n    //                             label: 'Error :',\n    //                             message: 'Epic Screen pop failed. Please make sure you are connected to the Snap Adapter with your Cisco Finesse Agent ',\n    //                             isEnabled: true\n    //                         },\n    //                     });\n    \n    \n    //                 } else {\n    //                     dispatch({\n    //                         type: 'BEGIN_NOTIFICATION',\n    //                         payload: {\n    //                             label: 'Error :',\n    //                             message: 'Data server down.Please try again',\n    //                             isEnabled: true\n    //                         },\n    //                     });\n    //                 }\n    \n    //             });\n    //         });\n    // });\n\n    const handlePatientScreenPopClick = () => {\n       \n       let patientid = patientvalues.pidepi && patientvalues.pidepi.ID\n       dispatch({\n            type: 'one-screenpop-get',\n            payload:{\n                agentId: agentId,\n                location: location,\n                activityId: activityId,\n                patientid: patientid\n            }\n       });\n\n    }\n\n    const handleApptScreenPopClick = () => {\n       \n       let patientid = patientvalues.pidepi && patientvalues.pidepi.ID\n       dispatch({\n            type: 'one-patient-appointment-screenpop-get',\n            payload:{\n                agentId: agentId,\n                location: location,\n                activityId: 'ES_APPT_DESK_WEB',\n                patientid: patientid\n            }\n       });\n    }\n\n    const menu = (\n        <Menu>\n          <Menu.Item key=\"1\" onClick={handlePatientScreenPopClick}> Patient Chart</Menu.Item>\n          <Menu.Item key=\"2\" onClick={handleApptScreenPopClick}> Appointment Desk</Menu.Item>\n        </Menu>\n    )\n\n\n\n    let realUI = (\n        <div></div>\n    )\n\n    if( (patientdetails && patientdetails.length>0)  || (patientvalues && patientvalues.name && patientvalues.dob) ) {\n        let matchescount = 0;\n        matchescount = patientdetails?patientdetails.length:0;\n        let pname = (patientvalues.name)?patientvalues.name:'';\n        let patientname: any = \"\";\n        patientname = pname;\n        // Code for if patient name is greater than 16 chars then spliting name into two.\n        // if(pname.length >= 16){\n        //     let name = pname.split(',');\n        //     patientname = array(name).map((v: any, index) => (\n        //         <>\n        //             {(index > 0) ? '' : ''}\n        //             {v}\n        //         </>\n        //     ));\n        // }else{\n        //     patientname = pname;\n        // }\n        realUI = (\n            <>\n                    <PatientModal />\n                    {/* <Layout style={{background:\"#fff\"}}>\n                    <Sider theme=\"light\" width=\"100px\">\n                        <br/>\n                        <div>\n                        <span\n                         style={{\n                             margin: \"10px\",\n                             display: \"inline-block\",\n                             verticalAlign: \"top\",\n                             minWidth: \"56px\",\n                         }}\n                     >\n                    <Avatar shape=\"circle\" size={80} > {getIntials(patientvalues) } </Avatar>\n                    </span>\n                    </div>\n                    <br/>\n                    <br/>\n\n\n\n                    </Sider>\n                    <Content>\n\n\n                        <Row>\n\n                        <Dropdown overlay={menu} >\n                                <Button type=\"primary\">\n                                    ScreenPop<Icon type=\"down\"/>\n                                </Button>\n                            </Dropdown>\n                        </Row>\n                        <Row >\n                            <Col span={2}>\n                            </Col>\n                            <Col span={10}>\n                            <NV name='Name' value={patientvalues.name} />\n                            </Col>\n                            <Col span={2}>\n                                <a onClick ={()=> {\n                                    dispatch({\n                                        type:\"one-patient-drawer\",\n                                        payload : {\n                                           visible: true\n                                        }\n                                })}} > <Icon type=\"right-circle\"/></a>\n\n                            </Col>\n\n                        </Row>\n                <Row>\n                    <Col span={2}>\n                    </Col>\n                    <Col span={11}>\n                        <NV name='MRN' value={patientvalues.id && patientvalues.id.ID} />\n                        <NV name='DOB' value={patientvalues.dob} />\n                        <NV name='Gender' value={patientvalues.gender} />\n                    </Col>\n                    <Col span={11}>\n                    <NV name='Phone' value={patientvalues.addresses && patientvalues.addresses[0] && patientvalues.addresses[0].phones && patientvalues.addresses[0].phones[0].num} />\n                    <NV name='Address' value={patientvalues.addresses && parseAddress(patientvalues.addresses)}  />\n\n\n                    </Col>\n                </Row>\n                </Content>\n            </Layout> */}\n            <div >\n                {/* <span\n                         style={{\n                            //  display: \"inline-block\",\n                            //  verticalAlign: \"top\",\n                            //  minWidth: \"250px\",\n                            //  marginLeft: \"115px\"\n                         }}\n                     >\n                      <p\n                             style={{\n                                 marginBottom: \".25rem\",\n                                 fontSize: \"0.75rem\"\n                             }}\n                         >\n\n                             <NV name='Name' value={patientname} />\n                      </p>   \n                     </span> */}\n                       \n            </div>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                // flexWrap: 'wrap',\n                padding: '15px',\n                justifyContent: 'space-between'\n            }}>\n                     <span\n                         style={{\n                            //  marginRight: \"25px\",\n                            //  display: \"inline-block\",\n                            //  verticalAlign: \"top\",\n                            //  minWidth: \"115px\",\n                            //  marginTop: \"-40px\"\n                             \n                         }}\n                     >\n                     <p\n                             style={{\n                                 marginBottom: \"1.25rem\",\n                                 fontSize: \"0.75rem\",\n                                 marginRight:\"5px\"\n                             }}\n                         >\n                        <Avatar shape=\"circle\" size={90} style={{backgroundColor: '#4396CF'}}> {getIntials(patientvalues) } </Avatar>\n                    </p>\n                     <p\n                             style={{\n                                 marginBottom: \"0.75rem\",\n                                 fontSize: \"0.75rem\",\n                                 marginRight:\"5px\"\n                             }}\n                         >\n                             <Dropdown overlay={menu} >\n                                <Button type=\"primary\" size=\"small\">\n                                    ScreenPop<Icon type=\"down\"/>\n                                </Button>\n                             </Dropdown>\n                   </p>\n                   <p\n                             style={{\n                                 marginBottom: \".25rem\",\n                                 fontSize: \"0.75rem\",\n                                 marginRight:\"5px\"\n                             }}\n                         >\n                             <Button type=\"primary\" size=\"small\" onClick ={()=> {\n                                    dispatch({\n                                        type:\"one-patient-drawer\",\n                                        payload : {\n                                           visible: true\n                                        }\n                                })}} >Matches ({matchescount})</Button>\n                   </p>\n                     </span>\n                     <div style={{\n                         display: 'flex',\n                         flexDirection: 'column',\n                         width: '70%'\n                     }}>\n                        <p\n                                    style={{\n                                        marginBottom: \".25rem\",\n                                        fontSize: \"0.75rem\"\n                                    }}\n                                >\n\n                                    <NV name='Name' value={patientname} />\n                            </p> \n                            <div style={{\n                                display: 'flex',\n                                flexDirection: 'row',\n                                flexWrap: 'wrap',\n                                justifyContent: 'space-between'\n                            }}>\n                            <span\n                            style={{\n                                //  display: \"inline-block\",\n                                //  verticalAlign: \"top\",\n                                //  minWidth: \"105px\",\n                                // display: 'flex',\n                                // flexDirection: 'row',\n                                // flexWrap: 'wrap',\n                                // justifyContent: 'space-between'\n                            }}\n                        >\n                        \n                            <p\n                                style={{\n                                    marginBottom: \".25rem\",\n                                    fontSize: \".75rem\",\n                                }}\n                            >\n                                <NV name='MRN' value={patientvalues.id && patientvalues.id.ID} />\n                    </p><p\n                                style={{\n                                    marginBottom: \".25rem\",\n                                    fontSize: \".75rem\",\n                                }}\n                            >\n                                <NV name='DOB' value={patientvalues.dob} />\n                    </p>\n                            <p\n                                style={{\n                                    marginBottom: \".25rem\",\n                                    fontSize: \".75rem\"\n                                }}\n                            >\n                                <NV name='Gender' value={patientvalues.gender} />\n                    </p>\n                    \n                        </span>\n                        <span\n                            style={{\n                                //  margin: \"0px\",\n                                //  display: \"inline-block\",\n                                //  verticalAlign: \"top\",\n                                //  minWidth: \"166px\"\n                            }}\n                        >\n                            <p\n                                style={{\n                                    marginBottom: \".25rem\",\n                                    fontSize: \".75rem\"\n                                }}\n                            >\n                                <NV name='Phone' value={patientvalues.addresses && patientvalues.addresses[0] && patientvalues.addresses[0].phones && patientvalues.addresses[0].phones[0].num} />\n                    </p>\n                            <p\n                                style={{\n                                    marginBottom: \".25rem\",\n                                    fontSize: \".75rem\"\n                                }}\n                            >\n\n                                <NV name='Address' value={patientvalues.addresses && parseAddress(patientvalues.addresses)}  />\n                            </p>\n                        </span>\n                            </div>\n                     </div>\n             </div>\n            </>\n        );\n    } else {\n            if(patientdetails && patientdetails.length == 0){\n                realUI = (\n                    <div style={{ textAlign: \"left\", lineHeight: \"22px\" }}>\n                        <Result\n                      status=\"warning\"\n                      title=\"No Match Found.\"\n\n                    />\n                      </div>\n                    );\n            } else {\n                realUI = (\n                    <div style={{ textAlign: \"left\", lineHeight: \"22px\" }}>\n                      </div>\n                    );\n            }\n\n    }\n\n    return (\n        <>\n        {realUI}\n\n{/*\n<div className=\"ov-card-content\">\n                 <div style={{ marginBottom: \"8px\" }}>\n                     <span\n                         style={{\n                             margin: \"0px\",\n                             display: \"inline-block\",\n                             verticalAlign: \"top\",\n                             width: \"100%\"\n                         }}\n                     >\n                         <p\n                             style={{\n                                 marginBottom: \".25rem\",\n                                 fontSize: \"0.75rem\"\n                             }}\n                         >\n                             <strong>\n                                 Name:&nbsp;\n                       <br />\n                             </strong>\n                             <Select value=\"1\" style={{ fontSize: '.8rem', width: \"100%\" }}>\n                                 <Option style={{ fontSize: '.8rem' }} value=\"1\">Doe, John</Option>\n                             </Select>\n                         </p>\n                     </span>\n                 </div>\n                 <div>\n                     <span\n                         style={{\n                             margin: \"0px\",\n                             display: \"inline-block\",\n                             verticalAlign: \"top\",\n                             minWidth: \"56px\",\n                         }}\n                     >\n                         <Avatar size=\"large\">AV</Avatar>\n                     </span>\n                     <span\n                         style={{\n                             display: \"inline-block\",\n                             verticalAlign: \"top\",\n                             minWidth: \"176px\",\n                         }}\n                     >\n                         <p\n                             style={{\n                                 marginBottom: \".25rem\",\n                                 fontSize: \"0.75rem\"\n                             }}\n                         >\n                             <strong>\n                                 DOB:&nbsp;\n                       <br />\n                             </strong>\n                             01/01/1970\n                   </p>\n                         <p\n                             style={{\n                                 marginBottom: \".25rem\",\n                                 fontSize: \".75rem\",\n                             }}\n                         >\n                             <strong>MRN:</strong>&nbsp;\n                             <br />\n                             01/01/1970\n                   </p><p\n                             style={{\n                                 marginBottom: \".25rem\",\n                                 fontSize: \".75rem\",\n                             }}\n                         >\n                             <strong>SSN:</strong>&nbsp;\n                             <br />\n                             ###-##-4444\n                   </p>\n\n                     </span>\n                     <span\n                         style={{\n                             margin: \"0px\",\n                             display: \"inline-block\",\n                             verticalAlign: \"top\",\n                             minWidth: \"176px\",\n                             overflow: \"hidden\"\n                         }}\n                     >\n                         <p\n                             style={{\n                                 marginBottom: \".25rem\",\n                                 fontSize: \".75rem\"\n                             }}\n                         >\n                             <strong>\n                                 Gender:&nbsp;\n                       <br />\n                             </strong>\n                             Male\n                   </p>\n                         <p\n                             style={{\n                                 marginBottom: \".25rem\",\n                                 fontSize: \".75rem\"\n                             }}\n                         >\n                             <strong>\n                                 Phone:&nbsp;\n                       <br />\n                             </strong>\n                             (+1) 212 323 4345\n                   </p>\n                         <p\n                             style={{\n                                 marginBottom: \".25rem\",\n                                 fontSize: \".75rem\"\n                             }}\n                         >\n\n                             <strong>\n                                 Address:&nbsp;\n                       <br />\n                             </strong>\n                             <address style={{ overflow: \"hidden\" }}>\n                                 Street-1, Street-2,<br /> Street-3, Austin, TX, 50021\n                     </address>\n                         </p>\n                     </span>\n                 </div>\n             </div>\n         */}\n        </>\n    );\n};\n\n\n"]}},"error":null,"hash":"dc9e32fa2b25f69da71ceb20220c0ffa","cacheData":{"env":{}}}
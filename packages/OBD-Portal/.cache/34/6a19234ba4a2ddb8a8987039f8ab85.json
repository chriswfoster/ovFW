{"id":"../../../node_modules/unch-app/src/store/caller/src/reducer.ts","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/tsconfig.json","includedInParent":true,"mtime":1569552466469},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/OBD-Portal/package.json","includedInParent":true,"mtime":1569955431018},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/package.json","includedInParent":true,"mtime":1569958537334}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types;\n(function (Types) {\n    Types[\"SET\"] = \"one-caller-set\";\n    Types[\"RESET\"] = \"one-caller-reset\";\n    Types[\"SELECT\"] = \"one-caller-select\";\n    Types[\"UNSELECT\"] = \"one-caller-unselect\";\n    Types[\"ADD\"] = \"one-caller-add\";\n    Types[\"UPDATE\"] = \"one-caller-update\";\n    Types[\"DELETE\"] = \"one-caller-delete\";\n    Types[\"PATIENT\"] = \"one-caller-patient\";\n    Types[\"PROVIDER\"] = \"one-caller-provider\";\n    Types[\"OTHER\"] = \"one-caller-other\";\n    Types[\"CALLERPROVIDER\"] = \"caller-provider\";\n    Types[\"CALLERPATIENT\"] = \"caller-patient\";\n})(Types = exports.Types || (exports.Types = {}));\n;\nvar initial = {\n    patients: [],\n    providers: [],\n    others: [],\n    selected: undefined,\n};\nvar intialselection = null;\nexports.callerreducer = function (context) {\n    var log = context.log;\n    return function (state, action) {\n        if (state === void 0) { state = initial; }\n        log.debug('one-caller-patients', 'reducer', {\n            action: action,\n        });\n        var updated = state;\n        var type = action.type, payload = action.payload;\n        var checktype = type;\n        var patientpayload = payload;\n        if (type === Types.SET) {\n            log.debug('one-caller-patientsssssssss', 'TYPES SET', {\n                action: action\n            });\n            if (payload && payload[0]) {\n                var protype = payload[0].typeID || payload[0].typeName;\n                if (protype === \"patient\") {\n                    checktype = Types.PATIENT;\n                    // check for the existing data and update the store with new data(from DB)\n                    if (updated.patients != patientpayload) {\n                        if (payload && payload.length > 0) {\n                            var copy = true;\n                            var name = payload[0].name ? payload[0].name : payload[0].Name;\n                            if (patientpayload && patientpayload.length > 0) {\n                                var patname = patientpayload[0].name ? patientpayload[0].name : patientpayload[0].Name;\n                                if (name === patname) {\n                                    copy = false;\n                                }\n                            }\n                            if (copy) {\n                                payload.forEach(function (json) {\n                                    patientpayload.push(json);\n                                });\n                            }\n                        }\n                    }\n                }\n                else if (protype === \"provider\") {\n                    checktype = Types.PROVIDER;\n                }\n                else if (protype === \"other\") {\n                    checktype = Types.OTHER;\n                }\n            }\n        }\n        else if (type === Types.PATIENT) {\n            // check for for store has reocrds from DB and update store with Patient.\n            if (updated.patients != patientpayload) {\n                patientpayload = updated.patients;\n                if (payload && payload.length > 0) {\n                    payload.forEach(function (json) {\n                        patientpayload.push(json);\n                    });\n                }\n            }\n        }\n        switch (checktype) {\n            case Types.PATIENT:\n                updated = {\n                    patients: patientpayload,\n                    providers: updated.providers,\n                    others: updated.others,\n                    selected: 'patient',\n                };\n                break;\n            case Types.PROVIDER:\n                updated = {\n                    patients: updated.patients,\n                    providers: payload,\n                    others: updated.others,\n                    selected: 'provider',\n                };\n                break;\n            case Types.OTHER:\n                updated = {\n                    patients: updated.patients,\n                    providers: updated.providers,\n                    others: payload,\n                    selected: 'other',\n                };\n                break;\n            case Types.RESET:\n                updated = initial;\n                break;\n        }\n        return updated;\n    };\n};\nexports.callerselection = function (context) {\n    var log = context.log;\n    return function (state, action) {\n        if (state === void 0) { state = intialselection; }\n        log.debug('one-caller-called-selection', 'callerselection', {\n            action: action,\n        });\n        var updated = state;\n        var type = action.type, payload = action.payload;\n        var checktype = type;\n        switch (checktype) {\n            case Types.SELECT:\n                updated = payload;\n                break;\n            case Types.UNSELECT:\n                updated = intialselection;\n                break;\n            case Types.RESET:\n                updated = intialselection;\n                break;\n        }\n        return updated;\n    };\n};\n"},"sourceMaps":{"js":{"version":3,"file":"reducer.js","sourceRoot":"","sources":["../../../node_modules/unch-app/src/store/caller/src/reducer.ts"],"names":[],"mappings":"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","sourcesContent":["\nexport const enum Types {\n    SET = 'one-caller-set',\n    RESET = 'one-caller-reset',\n    SELECT = 'one-caller-select',\n    UNSELECT = 'one-caller-unselect',\n    ADD = 'one-caller-add',\n    UPDATE = 'one-caller-update',\n    DELETE = 'one-caller-delete',\n    PATIENT = 'one-caller-patient',\n    PROVIDER = 'one-caller-provider',\n    OTHER = 'one-caller-other',\n    CALLERPROVIDER = 'caller-provider',\n    CALLERPATIENT = 'caller-patient',\n};\n\nexport interface Action<T, P = any> {\n    type: T,\n    payload: P,\n}\n\nconst initial: any = {\n    patients: [],\n    providers: [],\n    others: [],\n    selected: undefined,\n};\nconst intialselection: any = null;\n\nexport const callerreducer = (context: any) => {\n    const { log } = context;\n    return (state: typeof initial = initial, action: Action<Types>) => {\n        log.debug(\n            'one-caller-patients',\n            'reducer', {\n            action,\n        }\n        );\n\n        let updated = state;\n        const { type, payload } = action;\n        let checktype = type;\n        let patientpayload = payload;\n\n        if (type === Types.SET) {\n            log.debug(\n                'one-caller-patientsssssssss',\n                'TYPES SET', {\n                action\n            });\n            if (payload && payload[0]) {\n                let protype = payload[0].typeID || payload[0].typeName;\n                if (protype === \"patient\") {\n                    checktype = Types.PATIENT;\n                    // check for the existing data and update the store with new data(from DB)\n                    if (updated.patients != patientpayload) {\n                        if(payload && payload.length>0) {\n                            let copy =true;\n                            let name = payload[0].name?payload[0].name:payload[0].Name;\n                            if(patientpayload && patientpayload.length>0){\n                                let patname=patientpayload[0].name?patientpayload[0].name:patientpayload[0].Name;\n                                if(name === patname){\n                                    copy = false;\n                                }\n                            }\n                            if(copy){\n                                payload.forEach(json => {\n                                    patientpayload.push(json);\n                                   });\n                            }\n\n                        }\n                    }\n\n                } else if (protype === \"provider\") {\n                    checktype = Types.PROVIDER;\n                } else if (protype === \"other\") {\n                    checktype = Types.OTHER;\n                }\n            }\n        } else if (type === Types.PATIENT) {\n            // check for for store has reocrds from DB and update store with Patient.\n            if (updated.patients != patientpayload) {\n                patientpayload = updated.patients;\n                if(payload && payload.length>0) {\n                    payload.forEach(json => {\n                        patientpayload.push(json);\n                       });\n                }\n\n\n            }\n        }\n\n        switch (checktype) {\n            case Types.PATIENT:\n                updated = {\n                    patients: patientpayload,\n                    providers: updated.providers,\n                    others: updated.others,\n                    selected: 'patient',\n                };\n                break;\n            case Types.PROVIDER:\n                updated = {\n                    patients:\n                        updated.patients,\n                    providers:\n                        payload,\n                    others:\n                        updated.others,\n                    selected: 'provider',\n                };\n                break;\n            case Types.OTHER:\n                updated = {\n                    patients:\n                        updated.patients,\n                    providers:\n                        updated.providers,\n                    others:\n                        payload,\n                    selected: 'other',\n                };\n                break;\n            case Types.RESET:\n                updated = initial;\n                break;\n\n        }\n        return updated;\n    }\n}\nexport const callerselection = (context: any) => {\n    const { log } = context;\n    return (state: typeof initial = intialselection, action: Action<Types>) => {\n        log.debug(\n            'one-caller-called-selection',\n            'callerselection', {\n            action,\n        }\n        );\n\n        let updated = state;\n        const { type, payload } = action;\n        let checktype = type;\n\n        switch (checktype) {\n\n            case Types.SELECT:\n                updated = payload\n\n                break;\n            case Types.UNSELECT:\n                updated = intialselection\n\n                break;\n            case Types.RESET:\n                updated = intialselection\n\n                break;\n        }\n        return updated;\n    }\n}\n"]}},"error":null,"hash":"8e9ee511e7f71c95d398dc6d02c626cc","cacheData":{"env":{}}}
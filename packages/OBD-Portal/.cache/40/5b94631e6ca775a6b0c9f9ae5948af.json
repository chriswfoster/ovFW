{"id":"../../../node_modules/unch-app/src/ui/caller.tsx","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/tsconfig.json","includedInParent":true,"mtime":1569552466469},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/OBD-Portal/package.json","includedInParent":true,"mtime":1569955431018},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/package.json","includedInParent":true,"mtime":1569552466432},{"name":"react","loc":{"line":16,"column":22},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/react/index.js"},{"name":"antd/lib/avatar","loc":{"line":14,"column":39},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/avatar/index.js"},{"name":"react-redux","loc":{"line":15,"column":28},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/react-redux/es/index.js"},{"name":"antd/lib/badge","loc":{"line":17,"column":38},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/badge/index.js"},{"name":"antd/lib/layout","loc":{"line":18,"column":39},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/layout/index.js"},{"name":"antd/lib/tag","loc":{"line":19,"column":36},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/tag/index.js"},{"name":"antd/lib/select","loc":{"line":20,"column":39},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/select/index.js"},{"name":"antd/lib/divider","loc":{"line":21,"column":40},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/divider/index.js"},{"name":"antd/lib/row","loc":{"line":22,"column":36},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/row/index.js"},{"name":"antd/lib/col","loc":{"line":23,"column":36},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/col/index.js"},{"name":"antd/lib/typography","loc":{"line":24,"column":43},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/typography/index.js"},{"name":"antd/lib/input","loc":{"line":25,"column":38},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/input/index.js"},{"name":"antd/lib/button","loc":{"line":26,"column":39},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/antd/lib/button/index.js"},{"name":"one-micro","loc":{"line":27,"column":26},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-micro/index.ts"},{"name":"util","loc":{"line":28,"column":21},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/src/ui/caller.tsx","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/node-libs-browser/node_modules/util/util.js"}],"generated":{"js":"\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = __importStar(require(\"react\"));\nvar avatar_1 = __importDefault(require(\"antd/lib/avatar\"));\nvar react_redux_1 = require(\"react-redux\");\nvar react_1 = require(\"react\");\nvar badge_1 = __importDefault(require(\"antd/lib/badge\"));\nvar layout_1 = __importDefault(require(\"antd/lib/layout\"));\nvar tag_1 = __importDefault(require(\"antd/lib/tag\"));\nvar select_1 = __importDefault(require(\"antd/lib/select\"));\nvar divider_1 = __importDefault(require(\"antd/lib/divider\"));\nvar row_1 = __importDefault(require(\"antd/lib/row\"));\nvar col_1 = __importDefault(require(\"antd/lib/col\"));\nvar typography_1 = __importDefault(require(\"antd/lib/typography\"));\nvar input_1 = __importDefault(require(\"antd/lib/input\"));\nvar button_1 = __importDefault(require(\"antd/lib/button\"));\nvar one_micro_1 = require(\"one-micro\");\nvar util_1 = require(\"util\");\nvar Text = typography_1.default.Text;\nvar Option = select_1.default.Option;\nvar Sider = layout_1.default.Sider, Content = layout_1.default.Content, Footer = layout_1.default.Footer;\nvar CheckableTag = tag_1.default.CheckableTag;\nvar Types;\n(function (Types) {\n    Types[\"PATIENT\"] = \"one-caller-patient\";\n    Types[\"PROVIDER\"] = \"one-caller-provider\";\n    Types[\"OTHER\"] = \"one-caller-other\";\n    Types[\"UPDATE\"] = \"one-caller-update\";\n    Types[\"SELECT\"] = \"one-caller-select\";\n    Types[\"UNSELECT\"] = \"one-caller-unselect\";\n})(Types = exports.Types || (exports.Types = {}));\n;\nexports.CallerDetailFind = function (props) {\n    var bgcolor = [\"#87d068\", \"#5AA0CE\", \"#fde3cf\", \"#C0CE5A\"];\n    var dispatch = react_redux_1.useDispatch();\n    var callerstate = react_redux_1.useSelector(function (state) { return state.caller; });\n    var callerselection = react_redux_1.useSelector(function (state) { return state.callerselection; });\n    var _a = react_1.useState(\"\"), input = _a[0], setInput = _a[1];\n    var _b = react_1.useState(\"\"), addr = _b[0], setAddr = _b[1];\n    var _c = react_1.useState(\"Type\"), ctype = _c[0], setCallType = _c[1];\n    var _d = react_1.useState(\"Sub Type\"), stype = _d[0], setSubType = _d[1];\n    var _e = react_1.useState(\"\"), phno = _e[0], setPhNo = _e[1];\n    var dropdoninit = [];\n    dropdoninit.push(React.createElement(Option, { key: \"new\", value: \"New\" }, \"New\"));\n    dropdoninit.push(React.createElement(Option, { key: \"existing\", value: \"Existing\" }, \"Existing\"));\n    var _f = react_1.useState(dropdoninit), dropdown = _f[0], setDropDown = _f[1];\n    var badgecount = 0;\n    var initails = \"\";\n    var pnum = \"\";\n    var selectedaddr = \"\";\n    var patientscount = 0;\n    var providerscount = 0;\n    var otherscount = 0;\n    var emptyselectvalue = (React.createElement(select_1.default, null));\n    var selectvalue = emptyselectvalue;\n    if (callerstate && callerstate.selected) {\n        if (callerstate.patients) {\n            var patients = callerstate.patients;\n            if (patients.length) {\n                patientscount = patients.length;\n            }\n        }\n        if (callerstate.providers) {\n            var providers = callerstate.providers;\n            if (providers.length) {\n                providerscount == providers.length;\n            }\n        }\n        if (callerstate.others) {\n            var other = callerstate.others;\n            if (other.length) {\n                otherscount == other.length;\n            }\n        }\n        // check for callerselection\n        if (callerselection) {\n            if (callerselection && callerselection.name) {\n                initails = callerselection.name.charAt(0);\n                var splitname = callerselection.name.split(\" \");\n                if (splitname.length > 0) {\n                    initails = initails.concat(splitname[1] && splitname[1].charAt(0));\n                }\n            }\n            selectedaddr = callerselection.address && callerselection.address;\n            pnum = callerselection.phone && callerselection.phone;\n            console.log(\"-----caller seelction\", callerselection, callerstate.selected);\n            if (callerstate.selected === 'patient') {\n                if (callerselection.LastName) {\n                    initails = callerselection.LastName.charAt(0);\n                }\n                if (callerselection.FirstName) {\n                    var fnamei = callerselection.FirstName.charAt(0);\n                    initails = initails.concat(fnamei);\n                }\n                if (callerselection.Addresses) {\n                    var address = callerselection.Addresses;\n                    if (util_1.isArray(address)) {\n                        address.forEach(function (adr, index) {\n                            if (adr.Type === 'Permanent') {\n                                // for address\n                                if (adr.Street) {\n                                    selectedaddr = adr.Street;\n                                    selectedaddr = selectedaddr.concat(\",\");\n                                }\n                                if (adr.City) {\n                                    selectedaddr = selectedaddr.concat(adr.City);\n                                    selectedaddr = selectedaddr.concat(\",\");\n                                }\n                                if (adr.State) {\n                                    selectedaddr = selectedaddr.concat(adr.State);\n                                    selectedaddr = selectedaddr.concat(\",\");\n                                }\n                                if (adr.Country) {\n                                    selectedaddr = selectedaddr.concat(adr.Country);\n                                    selectedaddr = selectedaddr.concat(\",\");\n                                }\n                                if (adr.PostalCode) {\n                                    selectedaddr = selectedaddr.concat(adr.PostalCode);\n                                }\n                                // for Phone\n                                pnum = adr.PhoneNumbers[0].Number;\n                            }\n                        });\n                    }\n                }\n            }\n            //  else if (callerstate.selected === \"provider\" || callerstate.selected === \"other\") {\n            //   if (callerselection && callerselection.name) {\n            //     initails = callerselection.name.charAt(0);\n            //     let splitname = callerselection.name.split(\" \");\n            //     if (splitname.length > 0) {\n            //       initails = initails.concat(splitname[1] && splitname[1].charAt(0));\n            //     }\n            //   }\n            //   selectedaddr = callerselection.address && callerselection.address;\n            //   pnum = callerselection.phone && callerselection.phone;\n            // }\n        }\n        if (callerstate.selected === 'patient') {\n            var patients_1 = callerstate.patients;\n            badgecount = patients_1.length;\n            if (badgecount > 0) {\n                //debugger;\n                // patients.map(patient => {\n                //   displayname.push(<Option key={patient.Name?patient.Name:patient.name} value={patient.Name?patient.Name:patient.name}>{patient.Name?patient.Name:patient.name}</Option>);\n                // })\n                if (callerselection) {\n                    // nothing to be doen\n                }\n                else {\n                    dispatch({\n                        type: Types.SELECT,\n                        payload: patients_1[0],\n                    });\n                }\n                // displayvalue = patients[0].Name ? patients[0].Name : patients[0].name;\n                // console.log(\"display value   \", displayvalue);\n                //\n                var patientvalue = patients_1[0];\n                selectvalue = (React.createElement(select_1.default, { size: \"small\", style: { width: \"100%\" }, defaultValue: patientvalue.Name ? patientvalue.Name : patientvalue.name, onSelect: function (key) {\n                        var index = patients_1.findIndex(function (pdetails) { return pdetails.Name === key; });\n                        dispatch({\n                            type: Types.SELECT,\n                            payload: patients_1[index],\n                        });\n                        // setActivePat();\n                        // patientvalues=patintdet[index];\n                    } }, patients_1 && patients_1.map(function (patient, index) { return (React.createElement(Option, { key: index, data: patient, value: patient.Name ? patient.Name : patient.name },\n                    \" \",\n                    patient.Name ? patient.Name : patient.name,\n                    \" \")); })));\n                //\n            }\n        }\n        else if (callerstate.selected === 'provider' || callerstate.selected === 'other') {\n            var providers_1;\n            if (callerstate.selected === 'provider') {\n                providers_1 = callerstate.providers;\n            }\n            else {\n                providers_1 = callerstate.others;\n            }\n            badgecount = providers_1.length;\n            if (badgecount > 0) {\n                // patients.map(patient => {\n                //   displayname.push(<Option key={patient.Name?patient.Name:patient.name} value={patient.Name?patient.Name:patient.name}>{patient.Name?patient.Name:patient.name}</Option>);\n                // })\n                if (callerselection) {\n                    // nothing to be doen\n                }\n                else {\n                    dispatch({\n                        type: Types.SELECT,\n                        payload: providers_1[0],\n                    });\n                }\n                //\n                var providervalue = providers_1[0];\n                selectvalue = (React.createElement(select_1.default, { size: \"small\", style: { width: \"100%\" }, defaultValue: providervalue.name, onSelect: function (key) {\n                        var index = providers_1.findIndex(function (pdetails) { return pdetails.name === key; });\n                        dispatch({\n                            type: Types.SELECT,\n                            payload: providers_1[index],\n                        });\n                        // setActivePat();\n                        // patientvalues=patintdet[index];\n                    } }, providers_1 && providers_1.map(function (provider, index) { return (React.createElement(Option, { key: index, data: provider, value: provider.name },\n                    \" \",\n                    provider.name,\n                    \" \")); })));\n                //\n            }\n        }\n    }\n    console.log(\"-------callerUI \", callerstate, badgecount, callerselection, initails);\n    var otherform = (React.createElement(\"div\", { style: { background: '#fff', textAlign: 'center', width: \"360px\", } },\n        React.createElement(input_1.default, { placeholder: 'Caller Name', style: { fontSize: '.85rem', padding: \"4px\" }, size: 'small', value: input, onChange: function (event) {\n                setInput(event.target.value);\n            } }),\n        React.createElement(input_1.default, { placeholder: \"Caller From\", size: 'small', style: { fontSize: '.85rem', padding: \"4px\" }, value: phno, onChange: function (event) {\n                setPhNo(event.target.value);\n            } }),\n        React.createElement(select_1.default, { size: 'small', placeholder: \"Type\", value: ctype, style: { width: \"100%\", fontSize: '.85rem', padding: \"1px\" }, onSelect: function (key) {\n                setCallType(key);\n                console.log(\"key---\", key);\n                if (key == \"patient\") {\n                    dropdoninit = [];\n                    dropdoninit.push(React.createElement(Option, { key: \"new\", value: \"new\" }, \"New\"));\n                    dropdoninit.push(React.createElement(Option, { key: \"existing\", value: \"existing\" }, \"Existing\"));\n                    setDropDown(dropdoninit);\n                }\n                if (key == \"provider\") {\n                    dropdoninit = [];\n                    dropdoninit.push(React.createElement(Option, { key: \"doctor\", value: \"doctor\" }, \"Doctor\"));\n                    dropdoninit.push(React.createElement(Option, { key: \"nurse\", value: \"nurse\" }, \"Nurse\"));\n                    setDropDown(dropdoninit);\n                }\n                if (key == \"other\") {\n                    dropdoninit = [];\n                    dropdoninit.push(React.createElement(Option, { key: \"family\", value: \"family\" }, \"Family\"));\n                    dropdoninit.push(React.createElement(Option, { key: \"lawyer\", value: \"lawyer\" }, \"Lawyer\"));\n                    dropdoninit.push(React.createElement(Option, { key: \"other\", value: \"other\" }, \"Other\"));\n                    setDropDown(dropdoninit);\n                }\n            } },\n            React.createElement(Option, { key: \"patient\", value: \"patient\" }, \"Patient\"),\n            React.createElement(Option, { key: \"provider\", value: \"provider\" }, \"Provider\"),\n            React.createElement(Option, { key: \"other\", value: \"other\" }, \"Other\")),\n        React.createElement(select_1.default, { size: 'small', value: stype, placeholder: \"Sub Type\", style: { width: \"100%\", fontSize: '.85rem', padding: \"1px\" }, onSelect: function (key) {\n                setSubType(key);\n            } }, dropdown),\n        React.createElement(input_1.default, { placeholder: \"Address\", size: 'small', style: { width: \"100%\", fontSize: '.85rem', padding: \"4px\" }, value: addr, onChange: function (event) {\n                setAddr(event.target.value);\n            } }),\n        React.createElement(row_1.default, { justify: \"end\", style: { padding: \"2px\" } },\n            React.createElement(col_1.default, { span: 8 }),\n            React.createElement(col_1.default, { span: 16, style: { float: \"right\" } },\n                React.createElement(\"span\", { style: { float: \"right\", padding: \"4px\" } },\n                    React.createElement(button_1.default, { type: \"primary\", size: 'small', style: { fontSize: '.85rem' }, htmlType: \"submit\", onClick: function () {\n                            var dispatchtype = \"\";\n                            if (ctype === \"patient\") {\n                                dispatchtype = Types.PATIENT;\n                            }\n                            else if (ctype === \"provider\") {\n                                dispatchtype = Types.PROVIDER;\n                            }\n                            else {\n                                dispatchtype = Types.OTHER;\n                            }\n                            dispatch({\n                                type: Types.UPDATE,\n                                payload: {\n                                    typeId: ctype,\n                                    name: input,\n                                    phone: phno,\n                                    address: addr,\n                                    subtypeId: stype\n                                }\n                            });\n                        } }, \"Submit\")),\n                React.createElement(\"span\", { style: { float: \"right\", padding: \"4px\" } },\n                    React.createElement(button_1.default, { htmlType: \"submit\", size: 'small', style: { fontSize: '.85rem' }, onClick: function () {\n                            setAddr(\"\");\n                            setInput(\"\");\n                            setPhNo(\"\");\n                            setCallType(\"Type\");\n                            setSubType(\"Sub Type\");\n                        } }, \"Clear\")),\n                \" \"))));\n    return (React.createElement(\"div\", null, (callerstate && callerstate.selected) && (React.createElement(\"div\", null,\n        React.createElement(layout_1.default, null,\n            React.createElement(Content, { style: { background: '#fff' } },\n                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                    React.createElement(\"div\", { style: { padding: 2, fontSize: '.85rem', background: '#fff', textAlign: 'center' } },\n                        React.createElement(CheckableTag, { checked: ((callerstate.selected == 'patient')) ? true : false, onChange: function () {\n                                dispatch({\n                                    type: Types.PATIENT,\n                                    payload: callerstate.patients\n                                });\n                                dispatch({\n                                    type: Types.UNSELECT,\n                                    payload: null,\n                                });\n                            } }, \"Patient\"),\n                        React.createElement(CheckableTag, { checked: ((callerstate.selected == 'provider')) ? true : false, onChange: function () {\n                                dispatch({\n                                    type: Types.PROVIDER,\n                                    payload: callerstate.providers\n                                });\n                                dispatch({\n                                    type: Types.UNSELECT,\n                                    payload: null,\n                                });\n                            } }, \"Provider\"),\n                        React.createElement(CheckableTag, { checked: ((callerstate.selected == 'other')) ? true : false, onChange: function () {\n                                dispatch({\n                                    type: Types.OTHER,\n                                    payload: callerstate.others\n                                });\n                                dispatch({\n                                    type: Types.UNSELECT,\n                                    payload: null,\n                                });\n                            } }, \"Other\"),\n                        React.createElement(divider_1.default, null))),\n                ((callerstate.selected === \"other\" && (otherscount < 1)) ? (otherform) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: { padding: 2, background: '#fff', textAlign: 'center', width: \"100px\" } },\n                        React.createElement(badge_1.default, { count: badgecount, showZero: true },\n                            React.createElement(avatar_1.default, { style: { backgroundColor: '#51B885' }, shape: \"circle\", size: 85 },\n                                \" \",\n                                initails,\n                                \" \"))),\n                    ((badgecount >= 0) &&\n                        (React.createElement(\"div\", { style: {\n                                display: \"block\"\n                            } },\n                            React.createElement(\"div\", { style: {\n                                    float: \"right\",\n                                    width: \"2px\",\n                                    marginRight: \"300px\",\n                                    marginTop: \"-100px\"\n                                } },\n                                React.createElement(divider_1.default, { type: \"vertical\", style: { height: \"150px\" } }, \" \")),\n                            React.createElement(\"div\", { style: {\n                                    float: \"right\",\n                                    width: \"220px\",\n                                    marginRight: \"60px\",\n                                    marginTop: \"-150px\"\n                                } },\n                                React.createElement(one_micro_1.NV, { name: \"Caller Name\" }),\n                                (badgecount > 0) && selectvalue,\n                                React.createElement(one_micro_1.NV, { name: \"Caller Phone\", value: pnum }),\n                                React.createElement(one_micro_1.NV, { name: \"Caller Address\", value: \"\" }),\n                                React.createElement(\"p\", { style: { marginBottom: '4px', padding: '0px', fontSize: '.85rem' } }, selectedaddr))))))))))))));\n};\n"},"sourceMaps":{"js":{"version":3,"file":"caller.js","sourceRoot":"","sources":["../../../node_modules/unch-app/src/ui/caller.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Avatar from \"antd/lib/avatar\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useState } from 'react';\n\nimport Badge from \"antd/lib/badge\";\nimport Layout from \"antd/lib/layout\";\nimport Tag from \"antd/lib/tag\";\nimport Select from \"antd/lib/select\";\nimport Divider from \"antd/lib/divider\";\nimport Row from \"antd/lib/row\";\nimport Col from \"antd/lib/col\";\nimport Typography from \"antd/lib/typography\";\nimport Input from \"antd/lib/input\";\nimport Button from \"antd/lib/button\";\nimport { NV } from 'one-micro';\nimport { isArray } from 'util';\n\nconst { Text } = Typography;\n\nconst { Option } = Select;\n\n\nconst { Sider, Content, Footer } = Layout;\nconst { CheckableTag } = Tag;\n\nexport const enum Types {\n  PATIENT = 'one-caller-patient',\n  PROVIDER = 'one-caller-provider',\n  OTHER = 'one-caller-other',\n  UPDATE = 'one-caller-update',\n  SELECT = 'one-caller-select',\n  UNSELECT = 'one-caller-unselect',\n};\n\n\n\nexport const CallerDetailFind = (props: any) => {\n  let bgcolor = [\"#87d068\", \"#5AA0CE\", \"#fde3cf\", \"#C0CE5A\"];\n\n  const dispatch = useDispatch();\n  const callerstate = useSelector((state: any) => state.caller);\n  const callerselection = useSelector((state: any) => state.callerselection);\n  const [input, setInput] = useState(\"\");\n  const [addr, setAddr] = useState(\"\");\n  const [ctype, setCallType] = useState(\"Type\");\n  const [stype, setSubType] = useState(\"Sub Type\");\n  const [phno, setPhNo] = useState(\"\");\n\n\n  let dropdoninit = [];\n  dropdoninit.push(<Option key=\"new\" value=\"New\">New</Option>);\n  dropdoninit.push(<Option key=\"existing\" value=\"Existing\">Existing</Option>);\n  const [dropdown, setDropDown] = useState(dropdoninit);\n\n  let badgecount = 0;\n  let initails = \"\";\n  let pnum = \"\";\n  let selectedaddr = \"\";\n\n  let patientscount = 0;\n  let providerscount = 0;\n  let otherscount = 0;\n  let emptyselectvalue = (\n    <Select ></Select>\n  );\n  let selectvalue = emptyselectvalue;\n  if (callerstate && callerstate.selected) {\n    if (callerstate.patients) {\n      let patients = callerstate.patients;\n      if (patients.length) {\n        patientscount = patients.length;\n      }\n\n    }\n    if (callerstate.providers) {\n      let providers = callerstate.providers;\n      if (providers.length) {\n        providerscount == providers.length;\n      }\n    }\n    if (callerstate.others) {\n      let other = callerstate.others;\n      if (other.length) {\n        otherscount == other.length;\n      }\n    }\n\n    // check for callerselection\n    if (callerselection) {\n\n      if (callerselection && callerselection.name) {\n        initails = callerselection.name.charAt(0);\n        let splitname = callerselection.name.split(\" \");\n          if (splitname.length > 0) {\n            initails = initails.concat(splitname[1] && splitname[1].charAt(0));\n          }\n        }\n\n        selectedaddr = callerselection.address && callerselection.address;\n        pnum = callerselection.phone && callerselection.phone;\n\n\n      console.log(\"-----caller seelction\", callerselection, callerstate.selected);\n      if (callerstate.selected === 'patient') {\n        if (callerselection.LastName) {\n          initails = callerselection.LastName.charAt(0);\n        }\n        if (callerselection.FirstName) {\n          let fnamei = callerselection.FirstName.charAt(0);\n          initails = initails.concat(fnamei);\n        }\n\n        if (callerselection.Addresses) {\n          let address = callerselection.Addresses;\n          if (isArray(address)) {\n            address.forEach(function (adr, index) {\n              if (adr.Type === 'Permanent') {\n\n                // for address\n                if (adr.Street) {\n                  selectedaddr = adr.Street;\n                  selectedaddr = selectedaddr.concat(\",\");\n                }\n\n                if (adr.City) {\n                  selectedaddr = selectedaddr.concat(adr.City);\n                  selectedaddr = selectedaddr.concat(\",\");\n                }\n                if (adr.State) {\n                  selectedaddr = selectedaddr.concat(adr.State);\n                  selectedaddr = selectedaddr.concat(\",\");\n                }\n                if (adr.Country) {\n                  selectedaddr = selectedaddr.concat(adr.Country);\n                  selectedaddr = selectedaddr.concat(\",\");\n                }\n                if (adr.PostalCode) {\n                  selectedaddr = selectedaddr.concat(adr.PostalCode);\n\n                }\n\n                // for Phone\n                pnum = adr.PhoneNumbers[0].Number;\n\n\n              }\n\n            })\n          }\n\n        }\n      }\n      //  else if (callerstate.selected === \"provider\" || callerstate.selected === \"other\") {\n      //   if (callerselection && callerselection.name) {\n      //     initails = callerselection.name.charAt(0);\n      //     let splitname = callerselection.name.split(\" \");\n      //     if (splitname.length > 0) {\n      //       initails = initails.concat(splitname[1] && splitname[1].charAt(0));\n      //     }\n      //   }\n\n      //   selectedaddr = callerselection.address && callerselection.address;\n      //   pnum = callerselection.phone && callerselection.phone;\n\n      // }\n    }\n\n\n    if (callerstate.selected === 'patient') {\n      let patients = callerstate.patients;\n      badgecount = patients.length;\n      if (badgecount > 0) {\n        //debugger;\n        // patients.map(patient => {\n        //   displayname.push(<Option key={patient.Name?patient.Name:patient.name} value={patient.Name?patient.Name:patient.name}>{patient.Name?patient.Name:patient.name}</Option>);\n        // })\n        if (callerselection) {\n          // nothing to be doen\n        } else {\n          dispatch({\n            type: Types.SELECT,\n            payload: patients[0],\n          });\n        }\n        // displayvalue = patients[0].Name ? patients[0].Name : patients[0].name;\n        // console.log(\"display value   \", displayvalue);\n        //\n        let patientvalue = patients[0];\n        selectvalue = (\n          <Select size=\"small\" style={{ width: \"100%\" }} defaultValue={patientvalue.Name?patientvalue.Name:patientvalue.name} onSelect={(key: string) => {\n            let index = patients.findIndex((pdetails: any) => pdetails.Name === key);\n            dispatch({\n              type: Types.SELECT,\n              payload: patients[index],\n            })\n            // setActivePat();\n            // patientvalues=patintdet[index];\n          }\n\n          }>{\n              patients && patients.map((patient: any, index: number) => (\n                <Option key={index} data={patient} value={patient.Name?patient.Name:patient.name}> {patient.Name?patient.Name:patient.name} </Option>\n              ))\n            }\n          </Select>\n        );\n\n\n        //\n      }\n\n    } else if (callerstate.selected === 'provider' || callerstate.selected === 'other') {\n      let providers;\n      if (callerstate.selected === 'provider') {\n        providers = callerstate.providers\n      } else {\n        providers = callerstate.others\n      }\n\n      badgecount = providers.length;\n      if (badgecount > 0) {\n\n        // patients.map(patient => {\n        //   displayname.push(<Option key={patient.Name?patient.Name:patient.name} value={patient.Name?patient.Name:patient.name}>{patient.Name?patient.Name:patient.name}</Option>);\n        // })\n        if (callerselection) {\n          // nothing to be doen\n        } else {\n          dispatch({\n            type: Types.SELECT,\n            payload: providers[0],\n          });\n        }\n\n        //\n        let providervalue = providers[0];\n        selectvalue = (\n          <Select size=\"small\" style={{ width: \"100%\" }} defaultValue={providervalue.name} onSelect={(key: string) => {\n            let index = providers.findIndex((pdetails: any) => pdetails.name === key);\n            dispatch({\n              type: Types.SELECT,\n              payload: providers[index],\n            })\n            // setActivePat();\n            // patientvalues=patintdet[index];\n          }\n\n          }>{\n              providers && providers.map((provider: any, index: number) => (\n                <Option key={index} data={provider} value={provider.name}> {provider.name} </Option>\n              ))\n            }\n          </Select>\n        );\n\n\n        //\n\n      }\n\n    }\n\n  }\n\n  console.log(\"-------callerUI \", callerstate, badgecount, callerselection, initails);\n  let otherform = (\n    <div style={{ background: '#fff', textAlign: 'center', width: \"360px\", }}>\n\n      <Input placeholder='Caller Name' style={{ fontSize: '.85rem', padding: \"4px\" }} size='small' value={input} onChange={(event) => {\n        setInput(event.target.value);\n      }\n      }\n      />\n\n\n\n      <Input placeholder=\"Caller From\" size='small' style={{ fontSize: '.85rem', padding: \"4px\" }} value={phno} onChange={(event) => {\n        setPhNo(event.target.value);\n      }\n\n      } />\n\n      <Select size='small' placeholder=\"Type\" value={ctype} style={{ width: \"100%\", fontSize: '.85rem', padding: \"1px\" }} onSelect={(key: string) => {\n        setCallType(key);\n        console.log(\"key---\", key);\n        if (key == \"patient\") {\n          dropdoninit = [];\n          dropdoninit.push(<Option key=\"new\" value=\"new\">New</Option>);\n          dropdoninit.push(<Option key=\"existing\" value=\"existing\">Existing</Option>);\n          setDropDown(dropdoninit);\n        }\n        if (key == \"provider\") {\n          dropdoninit = [];\n          dropdoninit.push(<Option key=\"doctor\" value=\"doctor\">Doctor</Option>);\n          dropdoninit.push(<Option key=\"nurse\" value=\"nurse\">Nurse</Option>);\n          setDropDown(dropdoninit);\n        }\n        if (key == \"other\") {\n          dropdoninit = [];\n          dropdoninit.push(<Option key=\"family\" value=\"family\">Family</Option>);\n          dropdoninit.push(<Option key=\"lawyer\" value=\"lawyer\">Lawyer</Option>);\n          dropdoninit.push(<Option key=\"other\" value=\"other\">Other</Option>);\n          setDropDown(dropdoninit);\n        }\n      }\n      }>\n        <Option key=\"patient\" value=\"patient\">Patient</Option>\n        <Option key=\"provider\" value=\"provider\">Provider</Option>\n        <Option key=\"other\" value=\"other\">Other</Option>\n\n      </Select>\n\n\n      <Select size='small' value={stype} placeholder=\"Sub Type\" style={{ width: \"100%\", fontSize: '.85rem', padding: \"1px\" }} onSelect={(key: string) => {\n        setSubType(key);\n\n      }\n      }>\n        {\n          dropdown\n        }\n\n      </Select>\n\n\n      <Input placeholder=\"Address\" size='small' style={{ width: \"100%\", fontSize: '.85rem', padding: \"4px\" }} value={addr} onChange={(event) => {\n        setAddr(event.target.value);\n      }\n      } />\n\n\n      <Row justify=\"end\" style={{ padding: \"2px\" }}>\n        <Col span={8} />\n        <Col span={16} style={{ float: \"right\" }}>\n          <span style={{ float: \"right\", padding: \"4px\" }} >\n            <Button type=\"primary\" size='small' style={{ fontSize: '.85rem' }} htmlType=\"submit\" onClick={() => {\n              let dispatchtype = \"\";\n              if (ctype === \"patient\") {\n                dispatchtype = Types.PATIENT;\n              } else if (ctype === \"provider\") {\n                dispatchtype = Types.PROVIDER;\n              } else {\n                dispatchtype = Types.OTHER;\n              }\n\n              dispatch({\n                type: Types.UPDATE,\n                payload: {\n                  typeId: ctype,\n                  name: input,\n                  phone: phno,\n                  address: addr,\n                  subtypeId: stype\n                }\n\n              })\n            }} >\n              Submit\n        </Button>\n          </span>\n          <span style={{ float: \"right\", padding: \"4px\" }} >\n            <Button htmlType=\"submit\" size='small' style={{ fontSize: '.85rem' }} onClick={() => {\n              setAddr(\"\");\n              setInput(\"\");\n              setPhNo(\"\");\n              setCallType(\"Type\");\n              setSubType(\"Sub Type\");\n\n            }} >Clear</Button>\n          </span>\n          {\" \"}\n\n        </Col>\n      </Row>\n    </div>\n\n  )\n\n  return (\n    <div>\n\n      {(callerstate && callerstate.selected) && (\n        <div>\n          <Layout>\n            <Content style={{ background: '#fff' }}>\n              <div style={{ textAlign: 'center' }} >\n                <div style={{ padding: 2, fontSize: '.85rem', background: '#fff', textAlign: 'center' }}>\n                  <CheckableTag\n                    checked={((callerstate.selected == 'patient')) ? true : false}\n                    onChange={() => {\n                      dispatch({\n                        type: Types.PATIENT,\n                        payload:\n                          callerstate.patients\n\n                      });\n                      dispatch({\n                        type: Types.UNSELECT,\n                        payload: null,\n                      });\n                    }}>Patient</CheckableTag>\n\n                  <CheckableTag\n                    checked={((callerstate.selected == 'provider')) ? true : false}\n                    onChange={() => {\n                      dispatch({\n                        type: Types.PROVIDER,\n                        payload:\n                          callerstate.providers\n                      });\n                      dispatch({\n                        type: Types.UNSELECT,\n                        payload: null,\n                      });\n                    }}>Provider</CheckableTag>\n\n\n                  <CheckableTag\n                    checked={((callerstate.selected == 'other')) ? true : false}\n                    onChange={() => {\n                      dispatch({\n                        type: Types.OTHER,\n                        payload:\n                          callerstate.others\n\n                      });\n                      dispatch({\n                        type: Types.UNSELECT,\n                        payload: null,\n                      });\n                    }}>Other</CheckableTag>\n\n                  {/* {\n                  (providerscount > 0 || patientscount> 0) && (\n                    <CheckableTag\n                    checked={false} > Other</CheckableTag>\n                  )\n                } */}\n                  <Divider />\n                </div>\n\n              </div>\n              {((callerstate.selected === \"other\" && (otherscount < 1)) ? (\n\n                otherform\n              ) : (\n                  <>\n                    <div style={{ padding: 2, background: '#fff', textAlign: 'center', width: \"100px\" }}>\n                      <Badge count={badgecount} showZero>\n                        <Avatar\n                          style={{ backgroundColor: '#51B885' }}\n                          shape=\"circle\"\n                          size={85}\n                        > {initails} </Avatar>\n                      </Badge>\n                    </div>\n                    {\n                      ((badgecount >= 0) &&\n                        (\n                          <div style={{\n                            display: \"block\"\n                          }} >\n                            <div style={{\n                              float: \"right\",\n                              width: \"2px\",\n                              marginRight: \"300px\",\n                              marginTop: \"-100px\"\n                            }} >\n                              <Divider type=\"vertical\" style={{ height: \"150px\" }} > </Divider>\n\n                            </div>\n                            <div\n                              style={{\n                                float: \"right\",\n                                width: \"220px\",\n                                marginRight: \"60px\",\n                                marginTop: \"-150px\"\n                              }}\n                            >\n                              <NV name=\"Caller Name\"></NV>\n                              {\n                                (badgecount > 0) && selectvalue\n                              }\n                              {/* <Select size=\"small\" defaultValue={displayvalue} style={{ width: \"100%\",fontSize: '.85rem' }}>\n                          {\n                            displayname\n                          }\n\n                        </Select> */}\n\n                              <NV name=\"Caller Phone\" value={pnum}></NV>\n                              <NV name=\"Caller Address\" value=\"\"></NV>\n                              <p style={{ marginBottom: '4px', padding: '0px', fontSize: '.85rem' }}>\n                                {selectedaddr}\n                              </p>\n                            </div>\n                          </div>\n                        ))\n                    }\n                  </>\n\n                ))}\n\n\n            </Content>\n          </Layout>\n        </div>\n      )}\n    </div>\n  )\n}\n"]}},"error":null,"hash":"bf25c260969e60b07ea769893301d7f9","cacheData":{"env":{}}}
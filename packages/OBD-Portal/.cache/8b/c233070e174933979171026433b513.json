{"id":"../../../node_modules/one-state-interact-voice/src/interact.ts","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-state-interact-voice/tsconfig.json","includedInParent":true,"mtime":1569955866863},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/OBD-Portal/package.json","includedInParent":true,"mtime":1569955431018},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-state-interact-voice/package.json","includedInParent":true,"mtime":1569955866862},{"name":"./actions","loc":{"line":3,"column":24},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-state-interact-voice/src/interact.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-state-interact-voice/src/actions.ts"}],"generated":{"js":"\"use strict\";\nexports.__esModule = true;\nvar actions_1 = require(\"./actions\");\nexports.interact = function (context, reaction) {\n    var log = context.log;\n    return function (state) { return function (next) { return function (action) {\n        // default processing\n        var result = next(action);\n        // trigger reaction\n        var type = result.type;\n        log.debug('one-state-interact-voice', 'interact middleware', {\n            action: action,\n            result: result\n        });\n        if ((type === actions_1.Actions.SET) ||\n            (type === actions_1.Actions.RESET)) {\n            console.debug('one-state-interact-voice', 'interact middleware, triggering reaction', {\n                action: action,\n                result: result\n            });\n            var getState = state.getState, dispatch = state.dispatch;\n            reaction(context, getState, dispatch);\n        }\n        // return the action \n        // [redux docs]\n        return result;\n    }; }; };\n};\n"},"sourceMaps":{"js":{"version":3,"file":"interact.js","sourceRoot":"","sources":["../../../node_modules/one-state-interact-voice/src/interact.ts"],"names":[],"mappings":";;AAAA,qCAAoC;AAEvB,QAAA,QAAQ,GAAG,UAAC,OAAY,EAAE,QAAa;IACxC,IAAA,iBAAG,CAAa;IACxB,OAAO,UAAC,KAAU,IAAK,OAAA,UAAC,IAAS,IAAK,OAAA,UAAC,MAAW;QAC9C,qBAAqB;QACrB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QAE1B,mBAAmB;QACX,IAAA,kBAAI,CAAY;QACxB,GAAG,CAAC,KAAK,CACL,0BAA0B,EAC1B,qBAAqB,EAAE;YACnB,MAAM,QAAA;YACN,MAAM,QAAA;SACT,CACJ,CAAC;QAEF,IAAI,CAAC,IAAI,KAAK,iBAAO,CAAC,GAAG,CAAC;YACtB,CAAC,IAAI,KAAK,iBAAO,CAAC,KAAK,CAAC,EAAE;YAC1B,OAAO,CAAC,KAAK,CACT,0BAA0B,EAC1B,0CAA0C,EAAE;gBACxC,MAAM,QAAA;gBACN,MAAM,QAAA;aACT,CACJ,CAAC;YACM,IAAA,yBAAQ,EAAE,yBAAQ,CAAW;YACrC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;SACzC;QAED,qBAAqB;QACrB,eAAe;QACf,OAAO,MAAM,CAAC;IAClB,CAAC,EA9BqC,CA8BrC,EA9BsB,CA8BtB,CAAA;AACL,CAAC,CAAA","sourcesContent":["import { Actions } from './actions';\n\nexport const interact = (context: any, reaction: any) => {\n    const { log } = context;\n    return (state: any) => (next: any) => (action: any) => {\n        // default processing\n        let result = next(action);\n\n        // trigger reaction\n        const { type } = result;\n        log.debug(\n            'one-state-interact-voice',\n            'interact middleware', {\n                action,\n                result,\n            }\n        );\n\n        if ((type === Actions.SET) ||\n            (type === Actions.RESET)) {\n            console.debug(\n                'one-state-interact-voice',\n                'interact middleware, triggering reaction', {\n                    action,\n                    result,\n                }\n            );\n            const { getState, dispatch } = state;\n            reaction(context, getState, dispatch);\n        }\n\n        // return the action \n        // [redux docs]\n        return result;\n    }\n}\n"]}},"error":null,"hash":"c85b876db8d901010a89a0ef7d2896c1","cacheData":{"env":{}}}
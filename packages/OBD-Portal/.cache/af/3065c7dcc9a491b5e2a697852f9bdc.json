{"id":"../../../node_modules/unch-app-copy/src/store/index.ts","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app-copy/tsconfig.json","includedInParent":true,"mtime":1569551692857},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/rajeevDemo/package.json","includedInParent":true,"mtime":1569551796346},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app-copy/package.json","includedInParent":true,"mtime":1569551744966},{"name":"redux","loc":{"line":6,"column":22},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app-copy/src/store/index.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/redux/es/redux.js"},{"name":"one-state-interact-voice","loc":{"line":7,"column":41},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app-copy/src/store/index.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-state-interact-voice/index.ts"},{"name":"one-state-hotkeys","loc":{"line":8,"column":34},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app-copy/src/store/index.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-state-hotkeys/index.ts"},{"name":"../patient","loc":{"line":9,"column":24},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app-copy/src/store/index.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app-copy/src/patient/index.ts"},{"name":"redux-thunk","loc":{"line":10,"column":44},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app-copy/src/store/index.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/redux-thunk/es/index.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar redux_1 = require(\"redux\");\nvar one_state_interact_voice_1 = require(\"one-state-interact-voice\");\nvar one_state_hotkeys_1 = require(\"one-state-hotkeys\");\nvar patient_1 = require(\"../patient\");\nvar redux_thunk_1 = __importDefault(require(\"redux-thunk\"));\nexports.build = function (context) {\n    var log = context.log;\n    return redux_1.createStore(redux_1.combineReducers({\n        voice: one_state_interact_voice_1.reducer(context),\n        patients: patient_1.reducer(context),\n        hotkeys: one_state_hotkeys_1.reducer(context),\n    }), redux_1.applyMiddleware(redux_thunk_1.default));\n};\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../node_modules/unch-app-copy/src/store/index.ts"],"names":[],"mappings":";;;;;AAAA,+BAIe;AAMf,qEAIkC;AAElC,uDAE2B;AAE3B,sCAGoB;AAEpB,4DAAgC;AAGnB,QAAA,KAAK,GAAG,UAAC,OAAY;IACtB,IAAA,iBAAG,CAAa;IACxB,OAAO,mBAAW,CACd,uBAAe,CAAC;QACZ,KAAK,EAAE,kCAAK,CAAC,OAAO,CAAC;QACrB,QAAQ,EAAE,iBAAQ,CAAC,OAAO,CAAC;QAC3B,OAAO,EAAE,2BAAO,CAAC,OAAO,CAAC;KAC5B,CAAC,EAEF,uBAAe,CACX,qBAAK,CA0BR,CACJ,CAAC;AACN,CAAC,CAAC","sourcesContent":["import {\n    createStore,\n    combineReducers,\n    applyMiddleware,\n} from 'redux';\n\nimport {\n    VoiceEvent,\n} from 'one-interact-voice'\n\nimport {\n    interact,\n    reducer as voice,\n    Actions as VoiceActions,\n} from 'one-state-interact-voice';\n\nimport {\n    reducer as hotkeys,\n} from 'one-state-hotkeys';\n\nimport {\n    reducer as patients,\n    Types as PatientTypes,\n} from '../patient';\n\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger'\n\nexport const build = (context: any): any => {\n    const { log } = context;\n    return createStore(\n        combineReducers({\n            voice: voice(context),\n            patients: patients(context),\n            hotkeys: hotkeys(context),\n        }),\n\n        applyMiddleware(\n            thunk,\n            // store => next => action => {\n            //     const result = next(action);\n            //     const { type, payload } = result;\n            //     if (type === VoiceActions.SET) {\n            //         const { dispatch, getState } = store;\n            //         const { voice } = getState() as any;\n            //         if (voice) {\n            //             const { type, data } = voice;\n            //             if (type === VoiceEvent.END) {\n            //                 dispatch({\n            //                     type: PatientTypes.RESET,\n            //                 });\n            //             } else if (type === VoiceEvent.ARRIVE) {\n            //                 dispatch({\n            //                     type: PatientTypes.SET,\n            //                     payload: [{\n            //                         firstname: 'John',\n            //                         lastname: 'Doe',\n            //                     }]\n            //                 });\n            //             }\n            //         }\n            //     }\n            //     return result;\n            // }\n        ),\n    );\n};\n"]}},"error":null,"hash":"ea7b23df554141d51a30e6a419a4bdd4","cacheData":{"env":{}}}
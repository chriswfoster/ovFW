{"id":"../../../node_modules/unch-app/src/patient/src/reducer.ts","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/tsconfig.json","includedInParent":true,"mtime":1569550537786},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/unch-app-web/package.json","includedInParent":true,"mtime":1569550537783},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/unch-app/package.json","includedInParent":true,"mtime":1569550537784}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types;\n(function (Types) {\n    Types[\"SET\"] = \"one-patients-set\";\n    Types[\"RESET\"] = \"one-patients-reset\";\n    Types[\"SELECT\"] = \"one-patients-select\";\n    Types[\"UNSELECT\"] = \"one-patients-unselect\";\n    Types[\"ADD\"] = \"one-patients-add\";\n    Types[\"UPDATE\"] = \"one-patients-update\";\n    Types[\"DELETE\"] = \"one-patients-delete\";\n})(Types = exports.Types || (exports.Types = {}));\n;\nvar initial = {\n    patients: [],\n    selected: undefined,\n};\nexports.reducer = function (context) {\n    var log = context.log;\n    return function (state, action) {\n        if (state === void 0) { state = initial; }\n        log.debug('one-state-patients', 'reducer', {\n            action: action,\n        });\n        var updated = state;\n        var type = action.type, payload = action.payload;\n        switch (type) {\n            case Types.SET:\n                updated = {\n                    patients: payload.slice(),\n                    selected: false,\n                };\n                break;\n            case Types.RESET:\n                updated = initial;\n                break;\n            case Types.SELECT:\n                updated = __assign({}, updated, { selected: payload });\n                break;\n        }\n        return updated;\n    };\n};\n"},"sourceMaps":{"js":{"version":3,"file":"reducer.js","sourceRoot":"","sources":["../../../node_modules/unch-app/src/patient/src/reducer.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA,IAAkB,KAQjB;AARD,WAAkB,KAAK;IACnB,iCAAwB,CAAA;IACxB,qCAA4B,CAAA;IAC5B,uCAA8B,CAAA;IAC9B,2CAAkC,CAAA;IAClC,iCAAwB,CAAA;IACxB,uCAA8B,CAAA;IAC9B,uCAA8B,CAAA;AAClC,CAAC,EARiB,KAAK,GAAL,aAAK,KAAL,aAAK,QAQtB;AAAA,CAAC;AAOF,IAAM,OAAO,GAAQ;IACjB,QAAQ,EAAE,EAAE;IACZ,QAAQ,EAAE,SAAS;CACtB,CAAC;AAEW,QAAA,OAAO,GAAG,UAAC,OAAY;IACxB,IAAA,iBAAG,CAAa;IACxB,OAAO,UAAC,KAA+B,EAAE,MAAqB;QAAtD,sBAAA,EAAA,eAA+B;QACnC,GAAG,CAAC,KAAK,CACL,oBAAoB,EACpB,SAAS,EAAE;YACP,MAAM,QAAA;SACT,CACJ,CAAC;QAEF,IAAI,OAAO,GAAG,KAAK,CAAC;QACZ,IAAA,kBAAI,EAAE,wBAAO,CAAY;QACjC,QAAQ,IAAI,EAAE;YACV,KAAK,KAAK,CAAC,GAAG;gBACV,OAAO,GAAG;oBACN,QAAQ,EACD,OAAO,QACb;oBACD,QAAQ,EAAE,KAAK;iBAClB,CAAC;gBACF,MAAM;YAEV,KAAK,KAAK,CAAC,KAAK;gBACZ,OAAO,GAAG,OAAO,CAAC;gBAClB,MAAM;YAEV,KAAK,KAAK,CAAC,MAAM;gBACb,OAAO,gBACA,OAAO,IACV,QAAQ,EAAE,OAAO,GACpB,CAAC;gBACF,MAAM;SACb;QACD,OAAO,OAAO,CAAC;IACnB,CAAC,CAAA;AACL,CAAC,CAAA","sourcesContent":["\nexport const enum Types {\n    SET = 'one-patients-set',\n    RESET = 'one-patients-reset',\n    SELECT = 'one-patients-select',\n    UNSELECT = 'one-patients-unselect',\n    ADD = 'one-patients-add',\n    UPDATE = 'one-patients-update',\n    DELETE = 'one-patients-delete',\n};\n\nexport interface Action<T, P = any> {\n    type: T,\n    payload: P,\n}\n\nconst initial: any = {\n    patients: [],\n    selected: undefined,\n};\n\nexport const reducer = (context: any) => {\n    const { log } = context;\n    return (state: typeof initial = initial, action: Action<Types>) => {\n        log.debug(\n            'one-state-patients',\n            'reducer', {\n                action,\n            }\n        );\n\n        let updated = state;\n        const { type, payload } = action;\n        switch (type) {\n            case Types.SET:\n                updated = {\n                    patients: [\n                        ...payload\n                    ],\n                    selected: false,\n                };\n                break;\n\n            case Types.RESET:\n                updated = initial;\n                break;\n\n            case Types.SELECT:\n                updated = {\n                    ...updated,\n                    selected: payload,\n                };\n                break;\n        }\n        return updated;\n    }\n}\n"]}},"error":null,"hash":"03f25fa38780d4d7b373bb4c6dcd0883","cacheData":{"env":{}}}
{"id":"C/dB","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/tsconfig.json","includedInParent":true,"mtime":1569550736039},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/unch-app-gadget/package.json","includedInParent":true,"mtime":1569550537782},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/package.json","includedInParent":true,"mtime":1569550736038}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Dialog Event Type\n */\nvar EventType;\n(function (EventType) {\n    EventType[EventType[\"DIALOG_ADD\"] = 200] = \"DIALOG_ADD\";\n    EventType[EventType[\"DIALOG_CHANGE\"] = 210] = \"DIALOG_CHANGE\";\n    EventType[EventType[\"DIALOG_LOAD\"] = 220] = \"DIALOG_LOAD\";\n    EventType[EventType[\"DIALOG_DELETE\"] = 230] = \"DIALOG_DELETE\";\n})(EventType = exports.EventType || (exports.EventType = {}));\nexports.traceDialog = function (user, dialog) {\n    var ustate = user.getState();\n    var state = dialog.getState();\n    var dialogId = dialog.getId();\n    var callType = dialog.getCallType();\n    var parts = [];\n    var participants = dialog.getParticipants();\n    for (var _i = 0, participants_1 = participants; _i < participants_1.length; _i++) {\n        var _a = participants_1[_i], pstate = _a.state, mediaAddress = _a.mediaAddress;\n        parts.push({ pstate: pstate, mediaAddress: mediaAddress });\n    }\n    return {\n        ustate: ustate,\n        state: state,\n        dialogId: dialogId,\n        callType: callType,\n        parts: parts,\n    };\n};\n/**\n * Helper to get the participant corresponding to\n * the current agent\n * @param user\n * @param dialog\n */\nexports.findAgent = function (user, dialog) {\n    var match;\n    var extn = user.getExtension();\n    var participants = dialog.getParticipants();\n    for (var _i = 0, participants_2 = participants; _i < participants_2.length; _i++) {\n        var participant = participants_2[_i];\n        var mediaAddress = participant.mediaAddress;\n        if (extn === mediaAddress) {\n            match = participant;\n            break;\n        }\n    }\n    return match;\n};\n/**\n * Helper to extract call data from dialog\n * @param dialog\n * @param cvmap\n */\nexports.extractCallVars = function (dialog, cvmap) {\n    // default values\n    var mediaProps = dialog.getMediaProperties();\n    var data = {\n        'key': dialog.getId(),\n        'ani': dialog.getFromAddress(),\n        'dnis': mediaProps.dialedNumber,\n    };\n    // call variables\n    if (cvmap) {\n        var cvs = Object.keys(cvmap);\n        if (cvs.length > 0) {\n            for (var _i = 0, cvs_1 = cvs; _i < cvs_1.length; _i++) {\n                var cv = cvs_1[_i];\n                var key = cvmap[cv];\n                data[key] = mediaProps[cv];\n            }\n        }\n    }\n    return data;\n};\nexports.actions = function (context, user, dialog) {\n    var log = context.log;\n    return {\n        transfer: function (to, from) {\n            return new Promise(function (resolve, reject) {\n                var mediaAddr = from || user.getExtension();\n                log.debug('one-gadget-voice', 'hotkeys, initiating call transfer', {\n                    to: to,\n                    mediaAddr: mediaAddr,\n                });\n                dialog.initiateDirectTransfer(mediaAddr, to, {\n                    success: function (rsp) {\n                        var object = rsp.object;\n                        resolve(object);\n                    },\n                    error: function (rsp) {\n                        var error = rsp.error;\n                        if (!(error)) {\n                            reject({\n                                type: 'Unknown',\n                                message: 'Unknown error transferring the call'\n                            });\n                        }\n                        else {\n                            var errorType = error.errorType, errorMessage = error.errorMessage;\n                            reject({\n                                type: errorType,\n                                message: errorMessage,\n                            });\n                        }\n                    }\n                });\n            });\n        },\n        consult: function (to, from) {\n            return new Promise(function (resolve, reject) {\n                var mediaAddr = from || user.getExtension();\n                log.debug('one-gadget-voice', 'hotkeys, initiating call consult', {\n                    to: to,\n                    mediaAddr: mediaAddr,\n                });\n                dialog.makeConsultCall(mediaAddr, to, {\n                    success: function (rsp) {\n                        var object = rsp.object;\n                        resolve(object);\n                    },\n                    error: function (rsp) {\n                        var error = rsp.error;\n                        if (!(error)) {\n                            reject(reject({\n                                type: 'Unknown',\n                                message: 'Unknown error consulting the call'\n                            }));\n                        }\n                        else {\n                            var errorType = error.errorType, errorMessage = error.errorMessage;\n                            reject({\n                                type: errorType,\n                                message: errorMessage,\n                            });\n                        }\n                    }\n                });\n            });\n        }\n    };\n};\n// list of event handlers\nvar handlers = [];\nexports.bindDialogEvents = function (user, handler) {\n    handlers.push(handler);\n    // register dialog call back only once\n    if (handlers.length === 1) {\n        user.getDialogs({\n            onCollectionAdd: function (dialog) {\n                handlers.forEach(function (h) { return h({\n                    type: EventType.DIALOG_ADD,\n                    data: {\n                        user: user, dialog: dialog,\n                    },\n                }); });\n                dialog.addHandler('change', function (dialog) {\n                    handlers.forEach(function (h) { return h({\n                        type: EventType.DIALOG_CHANGE,\n                        data: {\n                            user: user, dialog: dialog,\n                        },\n                    }); });\n                });\n            },\n            onCollectionDelete: function (dialog) {\n                handlers.forEach(function (h) { return h({\n                    type: EventType.DIALOG_DELETE,\n                    data: {\n                        user: user, dialog: dialog,\n                    },\n                }); });\n            },\n            onLoad: function (dialogs) {\n                var collection = dialogs.getCollection();\n                var ids = Object.keys(collection);\n                var _loop_1 = function (id) {\n                    var dialog = collection[id];\n                    dialog.addHandler('change', function (dialog) {\n                        handlers.forEach(function (h) { return h({\n                            type: EventType.DIALOG_CHANGE,\n                            data: {\n                                user: user, dialog: dialog,\n                            },\n                        }); });\n                    });\n                    handlers.forEach(function (h) { return h({\n                        type: EventType.DIALOG_LOAD,\n                        data: {\n                            user: user, dialog: dialog,\n                        },\n                    }); });\n                };\n                for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {\n                    var id = ids_1[_i];\n                    _loop_1(id);\n                }\n            }\n        });\n    }\n};\n"},"sourceMaps":{"js":{"version":3,"file":"dialog.js","sourceRoot":"","sources":["../../../node_modules/one-gadget-voice/src/dialog.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Dialog Event Type\n */\nexport enum EventType {\n    DIALOG_ADD = 200,\n    DIALOG_CHANGE = 210,\n    DIALOG_LOAD = 220,\n    DIALOG_DELETE = 230,\n}\n\n/**\n * Dialog Event \n */\nexport interface Event {\n    type: EventType;\n    data: {\n        user: any,\n        dialog: any,\n    };\n}\n\nexport const traceDialog = (\n    user: any, dialog: any,\n) => {\n    const ustate = user.getState();\n    const state = dialog.getState();\n    const dialogId = dialog.getId();\n    const callType = dialog.getCallType();\n\n    const parts = [];\n    const participants = dialog.getParticipants();\n    for (const { state: pstate, mediaAddress } of participants) {\n        parts.push({ pstate, mediaAddress });\n    }\n\n    return {\n        ustate,\n        state,\n        dialogId,\n        callType,\n        parts,\n    };\n};\n\n/**\n * Helper to get the participant corresponding to\n * the current agent\n * @param user \n * @param dialog \n */\nexport const findAgent = (user: any, dialog: any) => {\n    let match;\n    const extn = user.getExtension();\n    const participants = dialog.getParticipants();\n    for (const participant of participants) {\n        const { mediaAddress } = participant;\n        if (extn === mediaAddress) {\n            match = participant;\n            break;\n        }\n    }\n    return match;\n};\n\n/**\n * Helper to extract call data from dialog\n * @param dialog \n * @param cvmap \n */\nexport const extractCallVars = (dialog: any, cvmap: any) => {\n    // default values\n    const mediaProps = dialog.getMediaProperties();\n    const data: any = {\n        'key': dialog.getId(),\n        'ani': dialog.getFromAddress(),\n        'dnis': mediaProps.dialedNumber,\n    };\n\n    // call variables\n    if (cvmap) {\n        const cvs = Object.keys(cvmap);\n        if (cvs.length > 0) {\n            for (const cv of cvs) {\n                const key = cvmap[cv];\n                data[key] = mediaProps[cv];\n            }\n        }\n    }\n    return data;\n};\n\nexport const actions = (context: any, user: any, dialog: any) => {\n    const { log } = context;\n    return {\n        transfer(to: string, from?: string): Promise<any> {\n            return new Promise((resolve, reject) => {\n                const mediaAddr = from || user.getExtension();\n                log.debug(\n                    'one-gadget-voice',\n                    'hotkeys, initiating call transfer', {\n                        to,\n                        mediaAddr,\n                    }\n                );\n\n                dialog.initiateDirectTransfer(mediaAddr, to, {\n                    success: (rsp: any) => {\n                        const { object } = rsp;\n                        resolve(object);\n                    },\n                    error: (rsp: any) => {\n                        const { error } = rsp;\n                        if (!(error)) {\n                            reject({\n                                type: 'Unknown',\n                                message: 'Unknown error transferring the call'\n                            });\n                        } else {\n                            const { errorType, errorMessage } = error;\n                            reject({\n                                type: errorType,\n                                message: errorMessage,\n                            });\n                        }\n                    }\n                });\n            });\n        },\n\n        consult(to: string, from?: string): Promise<any> {\n            return new Promise((resolve, reject) => {\n                const mediaAddr = from || user.getExtension();\n                log.debug(\n                    'one-gadget-voice',\n                    'hotkeys, initiating call consult', {\n                        to,\n                        mediaAddr,\n                    }\n                );\n                dialog.makeConsultCall(mediaAddr, to, {\n                    success: (rsp: any) => {\n                        const { object } = rsp;\n                        resolve(object);\n                    },\n                    error: (rsp: any) => {\n                        const { error } = rsp;\n                        if (!(error)) {\n                            reject(reject({\n                                type: 'Unknown',\n                                message: 'Unknown error consulting the call'\n                            }));\n                        } else {\n                            const { errorType, errorMessage } = error;\n                            reject({\n                                type: errorType,\n                                message: errorMessage,\n                            });\n                        }\n                    }\n                });\n            });\n        }\n    }\n};\n\n// list of event handlers\nconst handlers: ((event: Event) => void)[] = [];\n\nexport const bindDialogEvents = (\n    user: any,\n    handler: (event: Event) => void,\n) => {\n    handlers.push(handler);\n\n    // register dialog call back only once\n    if (handlers.length === 1) {\n        user.getDialogs({\n            onCollectionAdd: (dialog: any) => {\n                handlers.forEach(h => h({\n                    type: EventType.DIALOG_ADD,\n                    data: {\n                        user, dialog,\n                    },\n                }));\n\n                dialog.addHandler('change', (dialog: any) => {\n                    handlers.forEach(h => h({\n                        type: EventType.DIALOG_CHANGE,\n                        data: {\n                            user, dialog,\n                        },\n                    }));\n                });\n            },\n\n            onCollectionDelete: (dialog: any) => {\n                handlers.forEach(h => h({\n                    type: EventType.DIALOG_DELETE,\n                    data: {\n                        user, dialog,\n                    },\n                }));\n            },\n\n            onLoad: (dialogs: any) => {\n                const collection = dialogs.getCollection();\n                const ids = Object.keys(collection);\n\n                for (let id of ids) {\n                    const dialog = collection[id];\n                    dialog.addHandler('change', (dialog: any) => {\n                        handlers.forEach(h => h({\n                            type: EventType.DIALOG_CHANGE,\n                            data: {\n                                user, dialog,\n                            },\n                        }));\n                    });\n\n                    handlers.forEach(h => h({\n                        type: EventType.DIALOG_LOAD,\n                        data: {\n                            user, dialog,\n                        },\n                    }));\n                }\n            }\n        });\n    }\n}\n"]}},"error":null,"hash":"2d4591c90b90e865a382d5a977b34d1b","cacheData":{"env":{}}}
{"id":"m9hh","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/tsconfig.json","includedInParent":true,"mtime":1569550736039},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/unch-app-gadget/package.json","includedInParent":true,"mtime":1569550537782},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/package.json","includedInParent":true,"mtime":1569550736038},{"name":"one-interact-voice","loc":{"line":14,"column":35},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/src/voice.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-interact-voice/index.ts"},{"name":"./dialog","loc":{"line":15,"column":23},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/src/voice.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/src/dialog.ts"},{"name":"./trace","loc":{"line":16,"column":22},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/src/voice.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/src/trace.ts"}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar one_interact_voice_1 = require(\"one-interact-voice\");\nvar dialog_1 = require(\"./dialog\");\nvar trace_1 = require(\"./trace\");\nvar ActiveCall = /** @class */ (function () {\n    function ActiveCall() {\n    }\n    ActiveCall.prototype.clear = function () {\n        this.id = undefined;\n        this.type = undefined;\n    };\n    ActiveCall.prototype.change = function (id, type) {\n        var changed = false;\n        if ((this.id) && (this.id === id)) {\n            this.type = type;\n            changed = true;\n        }\n        return changed;\n    };\n    ActiveCall.prototype.update = function (id, type) {\n        this.id = id;\n        this.type = type;\n    };\n    ActiveCall.prototype.matches = function (id, type) {\n        return ((this.id) &&\n            (this.type) &&\n            (this.id === id) &&\n            (this.type === type));\n    };\n    return ActiveCall;\n}());\n/**\n * active call\n */\nvar activeCall = new ActiveCall();\n/**\n * Call types map\n * indexed by add/load and agent state\n */\nvar CallTypes = {\n    'add': {\n        'ACTIVE': [\n            'CONFERENCE', 'TRANSFER',\n        ],\n        'ALERTING': [\n            'PREROUTE_ACD_IN', 'OTHER_IN', 'TRANSFER',\n        ],\n    },\n    'load': {\n        'HELD': [\n            'PREROUTE_ACD_IN', 'OTHER_IN', 'TRANSFER',\n        ],\n        'ALERTING': [\n            'PREROUTE_ACD_IN', 'OTHER_IN', 'TRANSFER',\n        ],\n        'ACTIVE': [\n            'PREROUTE_ACD_IN', 'OTHER_IN', 'TRANSFER',\n            'CONFERENCE', 'CONSULT_OFFERED',\n        ]\n    }\n};\n/**\n * helper to check if the call type is in the list\n * associated with event (add, load) and agent state\n * @param event event (add, load)\n * @param state agent state\n * @param type call type\n */\nvar matchType = function (event, state, type) {\n    var matches = (((CallTypes[event])[state]).indexOf(type) !== -1);\n    return matches;\n};\n/**\n * Bind finesse dialog events to Interact reactions\n * @param voice\n * @param params\n */\nexports.bindEvents = function (context, events) {\n    var user = context.user, _a = context.settings, settings = _a === void 0 ? {} : _a;\n    var _b = settings.media, _c = (_b === void 0 ? {} : _b).voice, voice = _c === void 0 ? {} : _c;\n    var _d = voice.cvmap, cvmap = _d === void 0 ? {} : _d;\n    dialog_1.bindDialogEvents(user, function (event) {\n        trace_1.traceEvent(event, activeCall);\n        var type = event.type, dialog = event.data.dialog;\n        if (type === dialog_1.EventType.DIALOG_CHANGE) {\n            // update active call type changes \n            activeCall.change(dialog.getId(), dialog.getCallType());\n        }\n        else if (type === dialog_1.EventType.DIALOG_ADD) {\n            var agent = dialog_1.findAgent(user, dialog);\n            var state = ((agent) && (agent.state));\n            var callType = dialog.getCallType();\n            if (((state === 'ALERTING') || (state === 'ACTIVE')) &&\n                (matchType('add', state, callType))) {\n                var dialogId = dialog.getId();\n                // set active\n                activeCall.update(dialogId, callType);\n                events({\n                    type: one_interact_voice_1.VoiceEvent.ARRIVE,\n                    data: dialog_1.extractCallVars(dialog, cvmap),\n                    actions: dialog_1.actions(context, user, dialog),\n                });\n            }\n        }\n        else if (type === dialog_1.EventType.DIALOG_DELETE) {\n            var matches = activeCall.matches(dialog.getId(), dialog.getCallType());\n            if (matches) {\n                // clear state\n                activeCall.clear();\n                events({\n                    type: one_interact_voice_1.VoiceEvent.END,\n                    data: dialog_1.extractCallVars(dialog, cvmap),\n                    actions: dialog_1.actions(context, user, dialog),\n                });\n            }\n        }\n        else if (type === dialog_1.EventType.DIALOG_LOAD) {\n            var agent = dialog_1.findAgent(user, dialog);\n            var state = ((agent) && (agent.state));\n            var callType = dialog.getCallType();\n            if (((state === 'ALERTING') || (state === 'ACTIVE') || (state === 'HELD')) &&\n                (matchType('load', state, callType))) {\n                var dialogId = dialog.getId();\n                activeCall.update(dialogId, callType);\n                events({\n                    type: one_interact_voice_1.VoiceEvent.ARRIVE,\n                    data: __assign({}, dialog_1.extractCallVars(dialog, cvmap), { reload: true }),\n                    actions: dialog_1.actions(context, user, dialog),\n                });\n            }\n        }\n    });\n};\n"},"sourceMaps":{"js":{"version":3,"file":"voice.js","sourceRoot":"","sources":["../../../node_modules/one-gadget-voice/src/voice.ts"],"names":[],"mappings":"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","sourcesContent":["import { Interact, Event } from 'one-interact';\r\nimport { VoiceEvent } from 'one-interact-voice';\r\n\r\nimport {\r\n  Event as DialogEvent,\r\n  EventType as DialogEventType,\r\n  actions,\r\n  findAgent,\r\n  extractCallVars,\r\n  bindDialogEvents,\r\n} from './dialog';\r\n\r\nimport { traceEvent } from './trace';\r\n\r\nclass ActiveCall {\r\n  private id: string;\r\n  private type: string;\r\n\r\n  clear() {\r\n    this.id = undefined;\r\n    this.type = undefined;\r\n  }\r\n\r\n  change(id: string, type: string) {\r\n    let changed = false;\r\n    if ((this.id) && (this.id === id)) {\r\n      this.type = type;\r\n      changed = true;\r\n    }\r\n    return changed;\r\n  }\r\n\r\n  update(id: string, type: string) {\r\n    this.id = id;\r\n    this.type = type;\r\n  }\r\n\r\n  matches(id: string, type: string) {\r\n    return (\r\n      (this.id) &&\r\n      (this.type) &&\r\n      (this.id === id) &&\r\n      (this.type === type)\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * active call\r\n */\r\nconst activeCall = new ActiveCall();\r\n\r\n/**\r\n * Call types map\r\n * indexed by add/load and agent state\r\n */\r\nconst CallTypes: any = {\r\n  'add': {\r\n    'ACTIVE': [\r\n      'CONFERENCE', 'TRANSFER',\r\n    ],\r\n    'ALERTING': [\r\n      'PREROUTE_ACD_IN', 'OTHER_IN', 'TRANSFER',\r\n    ],\r\n  },\r\n\r\n  'load': {\r\n    'HELD': [\r\n      'PREROUTE_ACD_IN', 'OTHER_IN', 'TRANSFER',\r\n    ],\r\n    'ALERTING': [\r\n      'PREROUTE_ACD_IN', 'OTHER_IN', 'TRANSFER',\r\n    ],\r\n    'ACTIVE': [\r\n      'PREROUTE_ACD_IN', 'OTHER_IN', 'TRANSFER',\r\n      'CONFERENCE', 'CONSULT_OFFERED',\r\n    ]\r\n  }\r\n};\r\n\r\n/**\r\n * helper to check if the call type is in the list\r\n * associated with event (add, load) and agent state\r\n * @param event event (add, load)\r\n * @param state agent state\r\n * @param type call type\r\n */\r\nconst matchType = (\r\n  event: string, state: string, type: string\r\n) => {\r\n  const matches = (\r\n    ((CallTypes[event])[state]).indexOf(type) !== -1\r\n  );\r\n  return matches;\r\n}\r\n\r\n/**\r\n * Bind finesse dialog events to Interact reactions\r\n * @param voice \r\n * @param params \r\n */\r\nexport const bindEvents = (context: any, events: Interact<Event>) => {\r\n  const { user, settings = {} } = context;\r\n  const { media: { voice = {} } = {} } = settings;\r\n  const { cvmap = {} } = voice;\r\n\r\n  bindDialogEvents(user, (event: DialogEvent) => {\r\n    traceEvent(event, activeCall);\r\n    const { type, data: { dialog } } = event;\r\n\r\n    if (type === DialogEventType.DIALOG_CHANGE) {\r\n      // update active call type changes \r\n      activeCall.change(\r\n        dialog.getId(),\r\n        dialog.getCallType(),\r\n      );\r\n    } else if (type === DialogEventType.DIALOG_ADD) {\r\n\r\n      const agent = findAgent(user, dialog);\r\n      const state = ((agent) && (agent.state));\r\n      const callType = dialog.getCallType();\r\n\r\n      if (\r\n        ((state === 'ALERTING') || (state === 'ACTIVE')) &&\r\n        (matchType('add', state, callType))\r\n      ) {\r\n        const dialogId = dialog.getId();\r\n\r\n        // set active\r\n        activeCall.update(\r\n          dialogId,\r\n          callType,\r\n        );\r\n\r\n        events({\r\n          type: VoiceEvent.ARRIVE,\r\n          data: extractCallVars(\r\n            dialog,\r\n            cvmap,\r\n          ),\r\n          actions: actions(\r\n            context,\r\n            user,\r\n            dialog,\r\n          ),\r\n        });\r\n      }\r\n    } else if (type === DialogEventType.DIALOG_DELETE) {\r\n      const matches = activeCall.matches(\r\n        dialog.getId(),\r\n        dialog.getCallType(),\r\n      );\r\n\r\n      if (matches) {\r\n        // clear state\r\n        activeCall.clear();\r\n\r\n        events({\r\n          type: VoiceEvent.END,\r\n          data: extractCallVars(\r\n            dialog,\r\n            cvmap,\r\n          ),\r\n          actions: actions(\r\n            context,\r\n            user,\r\n            dialog,\r\n          ),\r\n        });\r\n      }\r\n    } else if (type === DialogEventType.DIALOG_LOAD) {\r\n      const agent = findAgent(user, dialog);\r\n      const state = ((agent) && (agent.state));\r\n      const callType = dialog.getCallType();\r\n\r\n      if (\r\n        ((state === 'ALERTING') || (state === 'ACTIVE') || (state === 'HELD')) &&\r\n        (matchType('load', state, callType))\r\n      ) {\r\n        const dialogId = dialog.getId();\r\n        activeCall.update(\r\n          dialogId,\r\n          callType,\r\n        );\r\n\r\n        events({\r\n          type: VoiceEvent.ARRIVE,\r\n          data: {\r\n            ...extractCallVars(dialog, cvmap),\r\n            reload: true,\r\n          },\r\n          actions: actions(\r\n            context,\r\n            user,\r\n            dialog,\r\n          ),\r\n        });\r\n      }\r\n    }\r\n  });\r\n};\r\n"]}},"error":null,"hash":"0714bd8187ef7b9856da89c4b9637497","cacheData":{"env":{}}}
{"id":"HyRt","dependencies":[{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/tsconfig.json","includedInParent":true,"mtime":1569550736039},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/packages/unch-app-gadget/package.json","includedInParent":true,"mtime":1569550537782},{"name":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/package.json","includedInParent":true,"mtime":1569550736038},{"name":"./dialog","loc":{"line":3,"column":23},"parent":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/src/hotkeys.ts","resolved":"/Users/chriswf/Documents/Projects/unch-gadget/node_modules/one-gadget-voice/src/dialog.ts"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dialog_1 = require(\"./dialog\");\nexports.bindHotKeyEvents = function (context, handler) {\n    var log = context.log, user = context.user;\n    dialog_1.bindDialogEvents(user, function (event) {\n        var type = event.type, dialog = event.data.dialog;\n        console.debug('one-gadget-voice', 'hotkeys, dialog trace', {\n            type: type,\n            dialogTrace: dialog_1.traceDialog(user, dialog),\n        });\n        if ((type === dialog_1.EventType.DIALOG_CHANGE) || (type === dialog_1.EventType.DIALOG_LOAD)) {\n            var callType = dialog.getCallType();\n            if ((callType === 'PREROUTE_ACD_IN') ||\n                (callType === 'CONSULT_OFFERED') ||\n                (callType === 'TRANSFER')) {\n                var active = false;\n                var agent = dialog_1.findAgent(user, dialog); // current agent\n                if (!((agent) && (agent.state !== 'WRAP_UP'))) {\n                    log.debug('one-gadget-voice', 'hotkeys, ignoring dialog due to current user state', {\n                        state: (agent) && (agent.state),\n                    });\n                }\n                else {\n                    var participants = dialog.getParticipants();\n                    participants = participants.filter(function (participants) {\n                        var state = participants.state, mediaAddress = participants.mediaAddress;\n                        var filtered = ((state !== 'DROPPED') &&\n                            (state !== 'WRAP_UP'));\n                        log.debug('one-gadget-voice', 'hotkeys, filtering participant', {\n                            state: state,\n                            filtered: filtered,\n                            mediaAddress: mediaAddress,\n                        });\n                        return filtered;\n                    });\n                    if ((participants) && (participants.length > 0)) {\n                        active = true;\n                        for (var _i = 0, participants_1 = participants; _i < participants_1.length; _i++) {\n                            var participant = participants_1[_i];\n                            var state = participant.state;\n                            if (state !== 'ACTIVE') {\n                                active = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n                var mediaProps = dialog.getMediaProperties();\n                var dnis = mediaProps.dialedNumber;\n                // enable action on buttons\n                log.debug('one-gadget-voice', 'hotkeys, updating actions on change', {\n                    dnis: dnis,\n                    active: active,\n                });\n                handler({\n                    dnis: dnis,\n                    active: active,\n                    actions: dialog_1.actions(context, user, dialog)\n                });\n            }\n        }\n        else if (type === dialog_1.EventType.DIALOG_DELETE) {\n            log.debug('one-gadget-voice', 'hotkeys, actions cleared on delete');\n            handler(undefined);\n        }\n    });\n};\n"},"sourceMaps":{"js":{"version":3,"file":"hotkeys.js","sourceRoot":"","sources":["../../../node_modules/one-gadget-voice/src/hotkeys.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Event,\n    EventType,\n    actions,\n    findAgent,\n    traceDialog,\n    bindDialogEvents,\n} from './dialog';\n\nexport const bindHotKeyEvents = (\n    context: any,\n    handler: (event: any) => void\n) => {\n    const { log, user } = context;\n    bindDialogEvents(user, (event: Event) => {\n        const { type, data: { dialog } } = event;\n        console.debug(\n            'one-gadget-voice',\n            'hotkeys, dialog trace', {\n                type,\n                dialogTrace: traceDialog(\n                    user,\n                    dialog,\n                ),\n            }\n        );\n\n        if ((type === EventType.DIALOG_CHANGE) || (type === EventType.DIALOG_LOAD)) {\n            const callType = dialog.getCallType();\n\n            if ((callType === 'PREROUTE_ACD_IN') ||\n                (callType === 'CONSULT_OFFERED') ||\n                (callType === 'TRANSFER')) {\n\n                let active = false;\n\n                const agent = findAgent(user, dialog); // current agent\n                if (!((agent) && (agent.state !== 'WRAP_UP'))) {\n                    log.debug(\n                        'one-gadget-voice',\n                        'hotkeys, ignoring dialog due to current user state', {\n                            state: (agent) && (agent.state),\n                        }\n                    );\n                } else {\n                    let participants = dialog.getParticipants();\n\n                    participants = participants.filter((participants: any) => {\n                        const { state, mediaAddress } = participants;\n                        const filtered = (\n                            (state !== 'DROPPED') &&\n                            (state !== 'WRAP_UP')\n                        );\n                        log.debug(\n                            'one-gadget-voice',\n                            'hotkeys, filtering participant', {\n                                state,\n                                filtered,\n                                mediaAddress,\n                            }\n                        );\n                        return filtered;\n                    });\n\n                    if ((participants) && (participants.length > 0)) {\n                        active = true;\n                        for (const participant of participants) {\n                            const { state } = participant;\n                            if (state !== 'ACTIVE') {\n                                active = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                const mediaProps = dialog.getMediaProperties();\n                const dnis = mediaProps.dialedNumber;\n\n                // enable action on buttons\n                log.debug(\n                    'one-gadget-voice',\n                    'hotkeys, updating actions on change', {\n                        dnis,\n                        active,\n                    }\n                );\n\n                handler({\n                    dnis,\n                    active,\n                    actions: actions(\n                        context,\n                        user,\n                        dialog,\n                    )\n                });\n            }\n        } else if (type === EventType.DIALOG_DELETE) {\n            log.debug(\n                'one-gadget-voice',\n                'hotkeys, actions cleared on delete'\n            );\n            handler(undefined);\n        }\n    });\n}"]}},"error":null,"hash":"524ec30d8d51dd4e052f363326b01836","cacheData":{"env":{}}}
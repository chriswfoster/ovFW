{"id":"../../../node_modules/unch-app/src/epics/patient/index.ts","dependencies":[{"name":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/unch-app/tsconfig.json","includedInParent":true,"mtime":1570193309185},{"name":"/Users/user/Documents/Projects/ssob/ovFW/packages/unch-app-web/package.json","includedInParent":true,"mtime":1570193309168},{"name":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/unch-app/package.json","includedInParent":true,"mtime":1570193309170},{"name":"redux-observable","loc":{"line":14,"column":33},"parent":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/unch-app/src/epics/patient/index.ts","resolved":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/redux-observable/lib/esm/index.js"},{"name":"rxjs/operators","loc":{"line":15,"column":26},"parent":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/unch-app/src/epics/patient/index.ts","resolved":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/rxjs/_esm5/operators/index.js"},{"name":"rxjs","loc":{"line":16,"column":21},"parent":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/unch-app/src/epics/patient/index.ts","resolved":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/rxjs/_esm5/index.js"},{"name":"util","loc":{"line":17,"column":21},"parent":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/unch-app/src/epics/patient/index.ts","resolved":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/node-libs-browser/node_modules/util/util.js"},{"name":"one-model-address","loc":{"line":18,"column":34},"parent":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/unch-app/src/epics/patient/index.ts","resolved":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/one-model-address/index.ts"},{"name":"one-core","loc":{"line":19,"column":25},"parent":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/unch-app/src/epics/patient/index.ts","resolved":"/Users/user/Documents/Projects/ssob/ovFW/node_modules/one-core/index.ts"}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar redux_observable_1 = require(\"redux-observable\");\nvar operators_1 = require(\"rxjs/operators\");\nvar rxjs_1 = require(\"rxjs\");\nvar util_1 = require(\"util\");\nvar one_model_address_1 = require(\"one-model-address\");\nvar one_core_1 = require(\"one-core\");\nvar Types;\n(function (Types) {\n    Types[\"SET\"] = \"one-patients-set\";\n    Types[\"RESET\"] = \"one-patients-reset\";\n    Types[\"SELECT\"] = \"one-patients-select\";\n    Types[\"UNSELECT\"] = \"one-patients-unselect\";\n    Types[\"ADD\"] = \"one-patients-add\";\n    Types[\"UPDATE\"] = \"one-patients-update\";\n    Types[\"DELETE\"] = \"one-patients-delete\";\n    Types[\"CALLERPATIENT\"] = \"caller-patient\";\n    Types[\"CALLERPROVIDER\"] = \"caller-provider\";\n    Types[\"APPT\"] = \"appointments-select\";\n    Types[\"REF\"] = \"referals-select\";\n    Types[\"CALLERPAT\"] = \"one-caller-patient\";\n    Types[\"CALLERSETPAT\"] = \"one-caller-set\";\n    Types[\"PCP\"] = \"pcp-select\";\n    Types[\"CALLEDTO\"] = \"calledto-select\";\n    Types[\"CALLEDTOCLEAR\"] = \"calledto-clear\";\n    Types[\"CALLERTOCLEAR\"] = \"one-caller-reset\";\n    Types[\"REFCLEAR\"] = \"referals-clear\";\n    Types[\"APPTCLEAR\"] = \"appointments-clear\";\n    Types[\"ENABLE_HOOK_MAP\"] = \"enable-hook-map\";\n    Types[\"CANCELAPPT\"] = \"cancel-appt\";\n    Types[\"GETGLOBALSEARCH\"] = \"get-global-search-data\";\n    Types[\"SETGLOBALSEARCH\"] = \"set-global-search-data\";\n    Types[\"GLOBALSEARCHCLEAR\"] = \"clear-global-search-data\";\n    Types[\"ADD_MAP\"] = \"ADD_MAP\";\n    Types[\"SETCANCELAPPT\"] = \"set-cancel-appt\";\n    Types[\"ONESCREENPOPGET\"] = \"one-screenpop-get\";\n    Types[\"ONESCREENPOPSET\"] = \"one-screenpop-set\";\n})(Types = exports.Types || (exports.Types = {}));\n;\nvar fetchCallerFulfilled = function (payload) { return ({ type: Types.SET, payload: payload }); };\nvar pushtoAppt = function (payload) { return ({ type: Types.APPT, payload: payload }); };\nvar pushtoRef = function (payload) { return ({ type: Types.REF, payload: payload }); };\nvar pushtoCallerPatient = function (payload) { return ({ type: Types.CALLERPAT, payload: payload }); };\nvar pushtoSETCallerPatient = function (payload) { return ({ type: Types.CALLERSETPAT, payload: payload }); };\nvar pushtoPCP = function (payload) { return ({ type: Types.PCP, payload: payload }); };\nvar pushtoCalledTo = function (payload) { return ({ type: Types.CALLEDTO, payload: payload }); };\nvar clearCalledTo = function (payload) { return ({ type: Types.CALLEDTOCLEAR, payload: payload }); };\nvar clearCaller = function (payload) { return ({ type: Types.CALLERTOCLEAR, payload: payload }); };\nvar clearReferal = function (payload) { return ({ type: Types.REFCLEAR, payload: payload }); };\nvar clearAppt = function (payload) { return ({ type: Types.APPTCLEAR, payload: payload }); };\nvar clearGlobalSearch = function (payload) { return ({ type: Types.GLOBALSEARCHCLEAR, payload: payload }); };\nvar pushtoMap = function (payload) { return ({ type: Types.ENABLE_HOOK_MAP, payload: payload }); };\nvar pushGlobalPatient = function (payload) { return ({ type: Types.SETGLOBALSEARCH, payload: payload }); };\nvar pushtoMapAddress = function (payload) { return ({ type: Types.ADD_MAP, payload: payload }); };\nvar pushtoCancelAppt = function (payload) { return ({ type: Types.SETCANCELAPPT, payload: payload }); };\nvar pushPatientEpicScreenPop = function (payload) { return ({ type: Types.ONESCREENPOPSET, payload: payload }); };\nvar initial = {\n    patients: [],\n    selected: undefined,\n};\n// export const fetchPatientEpic = (action$: { pipe: (arg0: any, arg1: any) => void; }) => action$.pipe(\n//     ofType(Types.CALLER),\n//     mergeMap(action => (\n//       ajax.getJSON(`https://api.myjson.com/bins/${action.payload}`).pipe(\n//       map(response => fetchCallerFulfilled(response))\n//     )\n//     )\n//     )\n//   );\n// call epic for patient search by phone\nexports.fetchPatientEpic = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.CALLERPATIENT), operators_1.mergeMap(function (action) {\n        //var pay=action.payload;\n        var getRequest = function (payload) {\n            // const response =  fetch(`https://api.myjson.com/bins/${payload.number}`)\n            var data = {\n                \"PhoneNumber\": payload.number\n            };\n            var response = server.post({\n                path: \"getpatientlookup\",\n                data: data\n            })\n                .then(function (response) { return response[0]; });\n            return rxjs_1.from(response);\n        };\n        return getRequest(action.payload).pipe(operators_1.map(function (response) { return fetchCallerFulfilled(response); }));\n    }));\n}); };\n// call DB for patient search by phone\nexports.fetchPatientFromDB = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.CALLERPATIENT), operators_1.mergeMap(function (action) {\n        var getCallerDetails = function (payload) {\n            var response = server.get({\n                path: \"getcallerdetails?phone=\" + payload.number + \"&typename=patient\",\n            }).then(function (response) { return response[0]; });\n            return rxjs_1.from(response);\n        };\n        return getCallerDetails(action.payload).pipe(operators_1.map(function (response) { return pushtoSETCallerPatient(response); }));\n    }));\n}); };\nexports.pushCallerPatEpic = function (context) { return (function (action$) {\n    return action$.pipe(redux_observable_1.ofType(Types.SET, Types.RESET), operators_1.map(function (action) { return pushtoCallerPatient(action.payload); }));\n}); };\n// sned nomatch for patient for provider match\nexports.patientNoMatchEpic = function (context) { return (function (action$) {\n    return action$.pipe(redux_observable_1.ofType(Types.CALLERPROVIDER), operators_1.map(function (action) {\n        return fetchCallerFulfilled([]);\n    }));\n}); };\nexports.fetchCalledToEpic = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.CALLERPATIENT, Types.CALLERPROVIDER), operators_1.mergeMap(function (action) {\n        //var pay=action.payload;\n        var getRequest = function (payload) {\n            // const response =  fetch(`https://api.myjson.com/bins/${payload.number}`)\n            var data = {\n                \"phone\": payload.dnis\n            };\n            var response = server.get({\n                path: \"getentitydetails?phone=\" + payload.dnis,\n            })\n                .then(function (response) { return response[0]; });\n            return rxjs_1.from(response);\n        };\n        return getRequest(action.payload).pipe(operators_1.map(function (response) { return pushtoCalledTo(response); }));\n    }));\n}); };\nexports.fetchMapToEpic = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.CALLERPATIENT, Types.CALLERPROVIDER, Types.SELECT), operators_1.mergeMap(function (action) {\n        return pushtoMap(true);\n    }));\n}); };\nexports.fetchAddressOfMapToEpic = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.SELECT), operators_1.mergeMap(function (action) {\n        var dataresponse = action.payload;\n        if (util_1.isArray(dataresponse)) {\n            dataresponse = dataresponse[0];\n        }\n        var getRequest = function (dataresponse) {\n            var response;\n            if (dataresponse && dataresponse.Addresses) {\n                var add = one_core_1.array(dataresponse.Addresses).filter(function (a) { return (a.Type === 'Permanent'); }).map(function (a) { return (one_model_address_1.address(a)); });\n                var patientAddress = (add && add.length > 0) ? add[0] : null;\n                var mapaddress = \"\";\n                var phone = \"\";\n                if (patientAddress != null) {\n                    mapaddress = \"\" + (patientAddress.country && patientAddress.country.trim().length > 0 ? \"\" + patientAddress.country + ',' : '') + (patientAddress.state && patientAddress.state.trim().length > 0 ? \"\" + patientAddress.state + ',' : '') + \" \" + (patientAddress.city && patientAddress.city.trim().length > 0 ? \"\" + patientAddress.city + ',' : '') + (patientAddress.zip && patientAddress.zip.trim().length > 0 ? \"\" + patientAddress.zip : '');\n                    phone = (patientAddress.phones && patientAddress.phones[0]) ? patientAddress.phones[0].num : '';\n                }\n                console.log('mapaddress:', mapaddress);\n                console.log('phone:', phone);\n                var payload = [{\n                        mapaddress: mapaddress,\n                        phone: phone,\n                        initmaploop: true\n                    }\n                ];\n                return rxjs_1.from(payload);\n            }\n            else {\n                var payload = [];\n                return rxjs_1.from(payload);\n            }\n        };\n        //  let response = getRequest(dataresponse);\n        //  return  pushtoMapAddress(response);\n        return getRequest(dataresponse).pipe(operators_1.map(function (response) { return pushtoMapAddress(response); }));\n    }));\n}); };\nexports.fetchApptEpic = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.SELECT), operators_1.mergeMap(function (action) {\n        var dataresponse = action.payload;\n        if (util_1.isArray(dataresponse)) {\n            dataresponse = dataresponse[0];\n        }\n        var getRequest = function (dataresponse) {\n            var response;\n            if (dataresponse && dataresponse.PatientID) {\n                var id = dataresponse.PatientID.find(function (id) {\n                    if (id['Type'] === \"EPI\") {\n                        return id['ID'];\n                    }\n                });\n                var data = {\n                    // \"PatientID\":\"E5597\"\n                    \"PatientID\": id.ID\n                };\n                var response_1 = server.post({\n                    path: \"getpatientappointment\",\n                    data: data\n                })\n                    .then(function (response) { return response[0]; });\n                return rxjs_1.from(response_1);\n            }\n            else {\n                return rxjs_1.from([]);\n            }\n        };\n        return getRequest(dataresponse).pipe(operators_1.map(function (response) { return pushtoAppt(response); }));\n    }));\n}); };\nexports.pushCancelApptToEpic = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.CANCELAPPT), operators_1.mergeMap(function (action) {\n        var dataresponse = action.payload;\n        var getRequest = function (dataresponse) {\n            if (dataresponse) {\n                var response = server.handle({\n                    path: \"cancelappointment?PatientID=\" + dataresponse.PatientID + \"&ContactID=\" + dataresponse.ContactID + \"&Reason=\" + dataresponse.Reason + \"&Comment=\" + dataresponse.Comment + \"\",\n                }, 'delete')\n                    .then(function (response) { return response[0]; });\n                return rxjs_1.from(response);\n            }\n            else {\n                return rxjs_1.from([]);\n            }\n        };\n        return getRequest(dataresponse).pipe(operators_1.map(function (response) { return pushtoCancelAppt(response); }));\n    }));\n}); };\nexports.fetchRefEpic = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.SELECT), operators_1.mergeMap(function (action) {\n        var dataresponse = action.payload;\n        if (util_1.isArray(dataresponse)) {\n            dataresponse = dataresponse[0];\n        }\n        var getRequest = function (dataresponse) {\n            var response;\n            if (dataresponse && dataresponse.PatientID) {\n                var id = dataresponse.PatientID.find(function (id) {\n                    if (id['Type'] === \"EPI\") {\n                        return id['ID'];\n                    }\n                });\n                var data = {\n                    // \"PatientID\":\"E5597\"\n                    \"PatientID\": id.ID\n                };\n                var response_2 = server.post({\n                    path: \"getpatientreferrals\",\n                    data: data\n                })\n                    .then(function (response) { return response[0]; });\n                return rxjs_1.from(response_2);\n            }\n            else {\n                return rxjs_1.from([]);\n            }\n        };\n        return getRequest(dataresponse).pipe(operators_1.map(function (response) { return pushtoRef(response); }));\n    }));\n}); };\n//Claer gadget on Call end\nexports.pushClearCalledTo = function (context) { return (function (action$) {\n    return action$.pipe(redux_observable_1.ofType(Types.RESET), operators_1.map(function (action) { return clearCalledTo(action.payload); }));\n}); };\nexports.pushClearCaller = function (context) { return (function (action$) {\n    return action$.pipe(redux_observable_1.ofType(Types.RESET), operators_1.map(function (action) { return clearCaller(action.payload); }));\n}); };\nexports.pushClearReferal = function (context) { return (function (action$) {\n    return action$.pipe(redux_observable_1.ofType(Types.RESET), operators_1.map(function (action) { return clearReferal(action.payload); }));\n}); };\nexports.pushClearAppt = function (context) { return (function (action$) {\n    return action$.pipe(redux_observable_1.ofType(Types.RESET), operators_1.map(function (action) { return clearAppt(action.payload); }));\n}); };\nexports.pushClearGlobalSearch = function (context) { return (function (action$) {\n    return action$.pipe(redux_observable_1.ofType(Types.RESET), operators_1.map(function (action) { return clearGlobalSearch(action.payload); }));\n}); };\nexports.fetchPCPEpic = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.SELECT), operators_1.mergeMap(function (action) {\n        var dataresponse = action.payload;\n        if (util_1.isArray(dataresponse)) {\n            dataresponse = dataresponse[0];\n        }\n        var getRequest = function (payload) {\n            var response;\n            if (dataresponse && dataresponse.PatientID) {\n                var id = dataresponse.PatientID.find(function (id) {\n                    if (id['Type'] === \"EPI\") {\n                        return id['ID'];\n                    }\n                });\n                var data = {\n                    // \"PatientID\":\"E5597\"\n                    \"PatientID\": id.ID\n                };\n                var response_3 = server.post({\n                    path: \"getpcp\",\n                    data: data\n                })\n                    .then(function (response) { return response[0]; });\n                return rxjs_1.from(response_3);\n            }\n            else {\n                return rxjs_1.from([]);\n            }\n        };\n        return getRequest(action.payload).pipe(operators_1.map(function (response) { return pushtoPCP(response); }));\n    }));\n}); };\n// call epic for patient search by phone\nexports.fetchGlobalPatientEpic = function (context) { return (function (action$) {\n    var server = context.server;\n    return action$.pipe(redux_observable_1.ofType(Types.GETGLOBALSEARCH), operators_1.mergeMap(function (action) {\n        //var pay=action.payload;\n        var getRequest = function (payload) {\n            // const response =  fetch(`https://api.myjson.com/bins/${payload.number}`)\n            var data = {\n                \"Name\": payload.name,\n                \"DateOfBirth\": payload.dob,\n                \"PatientID\": payload.mrn,\n                \"PhoneNumber\": payload.phone\n            };\n            var response = server.post({\n                path: \"getpatientsearchglobal\",\n                data: data\n            })\n                .then(function (response) { return response[0]; });\n            return rxjs_1.from(response);\n        };\n        return getRequest(action.payload).pipe(operators_1.map(function (response) { return pushGlobalPatient(response); }));\n    }));\n}); };\n// call epic for patient screenpop\nexports.fetchPatientEpicScreenPop = function (context) { return (function (action$) {\n    var epicserver = context.epicserver;\n    console.log('epicserver::', epicserver);\n    return action$.pipe(redux_observable_1.ofType(Types.ONESCREENPOPGET), operators_1.mergeMap(function (action) {\n        //var pay=action.payload;\n        var getRequest = function (payload) {\n            // const response =  fetch(`https://api.myjson.com/bins/${payload.number}`)\n            var response = epicserver.get({\n                path: \"?agentId=\" + payload.agentId + \"&location=\" + payload.location + \"&patientId=\" + payload.patientid + \"&activityId=\" + payload.activityId + \"&eventType=Epic\"\n            })\n                .then(function (response) { return response[1]; }).catch(function (response) { return response; });\n            return rxjs_1.from(response);\n        };\n        return getRequest(action.payload).pipe(operators_1.map(function (response) { return pushPatientEpicScreenPop(response); }));\n    }));\n}); };\n// Patient Store\nexports.patients = function (context) {\n    var log = context.log;\n    return function (state, action) {\n        if (state === void 0) { state = initial; }\n        log.debug('one-state-patients', 'reducer', {\n            action: action,\n        });\n        var updated = state;\n        var type = action.type, payload = action.payload;\n        switch (type) {\n            case Types.SET:\n                var patientdetails = payload;\n                var selected = void 0;\n                // if ((patientdetails) && (patientdetails.length >1)) {\n                //   selected = patientdetails[0];\n                // }\n                updated = {\n                    selected: selected,\n                    patientdetails: patientdetails,\n                    orgList: undefined,\n                };\n                break;\n            case Types.RESET:\n                updated = initial;\n                break;\n            case Types.SELECT:\n                updated = __assign({}, updated, { selected: payload });\n                break;\n        }\n        return updated;\n    };\n};\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../node_modules/unch-app/src/epics/patient/index.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { createEpicMiddleware,combineEpics,ofType } from 'redux-observable';\nimport { map,mergeMap } from 'rxjs/operators';\nimport {ajax } from 'rxjs/ajax';\nimport { from, Observable } from 'rxjs';\n\nimport { useCtx } from 'one-ui-provider';\nimport { isArray } from 'util';\nimport { address } from 'one-model-address';\nimport { array } from 'one-core';\n\n\nexport const enum Types {\n    SET = 'one-patients-set',\n    RESET = 'one-patients-reset',\n    SELECT = 'one-patients-select',\n    UNSELECT = 'one-patients-unselect',\n    ADD = 'one-patients-add',\n    UPDATE = 'one-patients-update',\n    DELETE = 'one-patients-delete',\n    CALLERPATIENT= 'caller-patient',\n    CALLERPROVIDER= 'caller-provider',\n    APPT='appointments-select',\n    REF='referals-select',\n    CALLERPAT = 'one-caller-patient',\n    CALLERSETPAT ='one-caller-set',\n    PCP='pcp-select',\n    CALLEDTO='calledto-select',\n    CALLEDTOCLEAR = 'calledto-clear',\n    CALLERTOCLEAR = 'one-caller-reset',\n    REFCLEAR = 'referals-clear',\n    APPTCLEAR = 'appointments-clear',\n    ENABLE_HOOK_MAP= 'enable-hook-map',\n    CANCELAPPT= 'cancel-appt',\n    GETGLOBALSEARCH= 'get-global-search-data',\n    SETGLOBALSEARCH= 'set-global-search-data',\n    GLOBALSEARCHCLEAR='clear-global-search-data',\n    ADD_MAP= 'ADD_MAP',\n    SETCANCELAPPT='set-cancel-appt',\n    ONESCREENPOPGET='one-screenpop-get',\n    ONESCREENPOPSET='one-screenpop-set'\n\n\n};\n\n\nconst fetchCallerFulfilled = (payload:any) => ({type:Types.SET, payload});\nconst pushtoAppt = (payload:any) => ({type:Types.APPT, payload});\nconst pushtoRef = (payload:any) => ({type:Types.REF, payload});\nconst pushtoCallerPatient = (payload:any) => ({type:Types.CALLERPAT, payload});\nconst pushtoSETCallerPatient = (payload:any) => ({type:Types.CALLERSETPAT, payload});\nconst pushtoPCP = (payload:any) => ({type:Types.PCP, payload});\nconst pushtoCalledTo = (payload:any) => ({type:Types.CALLEDTO, payload});\nconst clearCalledTo=(payload:any) => ({type:Types.CALLEDTOCLEAR,payload});\nconst clearCaller =(payload:any) => ({type:Types.CALLERTOCLEAR,payload});\nconst clearReferal=(payload:any) => ({type:Types.REFCLEAR,payload});\nconst clearAppt=(payload:any) => ({type:Types.APPTCLEAR,payload});\nconst clearGlobalSearch=(payload:any) => ({type:Types.GLOBALSEARCHCLEAR,payload});\nconst pushtoMap = (payload:any) => ({type:Types.ENABLE_HOOK_MAP,payload});\nconst pushGlobalPatient = (payload:any) => ({type:Types.SETGLOBALSEARCH, payload});\nconst pushtoMapAddress = (payload:any) => ({type:Types.ADD_MAP,payload});\nconst pushtoCancelAppt = (payload:any) => ({type:Types.SETCANCELAPPT, payload});\nconst pushPatientEpicScreenPop = (payload:any) => ({type:Types.ONESCREENPOPSET, payload});\n export interface Action<T, P = any> {\n    type: T,\n    payload: P,\n}\n\nconst initial: any = {\n    patients: [],\n    selected: undefined,\n};\n\n// export const fetchPatientEpic = (action$: { pipe: (arg0: any, arg1: any) => void; }) => action$.pipe(\n//     ofType(Types.CALLER),\n//     mergeMap(action => (\n//       ajax.getJSON(`https://api.myjson.com/bins/${action.payload}`).pipe(\n//       map(response => fetchCallerFulfilled(response))\n//     )\n//     )\n\n//     )\n//   );\n\n\n\n\n\n// call epic for patient search by phone\nexport const fetchPatientEpic = (context:any) => (\n    (action$:any) => {\n        const {server}=context;\n        return action$.pipe(\n            ofType(Types.CALLERPATIENT),\n            mergeMap(action => {\n                //var pay=action.payload;\n                const getRequest =  (payload: any) => {\n                    // const response =  fetch(`https://api.myjson.com/bins/${payload.number}`)\n                    const data= {\n                        \"PhoneNumber\":payload.number\n                    }\n                    const response =  server.post({\n                        path:\"getpatientlookup\",\n                        data:data\n                    })\n                         .then((response: any) => response[0])\n                    return from(response)\n                }\n\n                return getRequest(action.payload).pipe(\n\n                        map(response => fetchCallerFulfilled(response))\n\n\n\n                )\n            })\n        )\n    }\n);\n\n// call DB for patient search by phone\nexport const fetchPatientFromDB = (context:any) => (\n    (action$:any) =>{\n        const {server} = context;\n        return action$.pipe(\n            ofType(Types.CALLERPATIENT),\n            mergeMap(action => {\n                const getCallerDetails = (payload) => {\n                    const response=server.get({\n                        path:\"getcallerdetails?phone=\"+payload.number+\"&typename=patient\",\n                    }).then((response:any)=>response[0])\n                return from(response);\n                }\n                return getCallerDetails(action.payload).pipe(\n                    map(response => pushtoSETCallerPatient(response))\n            )\n            })\n        )\n}\n\n);\n\n\nexport const pushCallerPatEpic = (context:any) => (\n    (action$:any) => {\n            return action$.pipe(\n                    ofType(Types.SET, Types.RESET),\n                    map(action =>pushtoCallerPatient(action.payload))\n\n            )\n    }\n);\n\n// sned nomatch for patient for provider match\nexport const patientNoMatchEpic = (context:any) => (\n    (action$:any) => {\n        return action$.pipe(\n            ofType(Types.CALLERPROVIDER),\n            map(action => {\n                return fetchCallerFulfilled([]);\n             })\n        )\n    }\n)\n\n\nexport const fetchCalledToEpic = (context:any) => (\n    (action$:any) => {\n        const {server}=context;\n        return action$.pipe(\n            ofType(Types.CALLERPATIENT,Types.CALLERPROVIDER),\n            mergeMap(action => {\n                //var pay=action.payload;\n                const getRequest =  (payload: any) => {\n                    // const response =  fetch(`https://api.myjson.com/bins/${payload.number}`)\n                    const data= {\n                        \"phone\":payload.dnis\n                    }\n                    const response =  server.get({\n                        path:\"getentitydetails?phone=\"+payload.dnis,\n\n                    })\n                         .then((response: any) => response[0])\n                    return from(response)\n                }\n\n                return getRequest(action.payload).pipe(\n\n                        map(response => pushtoCalledTo(response))\n\n\n\n                )\n            })\n        )\n    }\n);\n\nexport const fetchMapToEpic = (context:any) => (\n    (action$:any) => {\n        const {server}=context;\n        return action$.pipe(\n            ofType(Types.CALLERPATIENT,Types.CALLERPROVIDER,Types.SELECT),\n            mergeMap(action => {\n                return pushtoMap(true);\n            })\n        )\n    }\n);\n\nexport const fetchAddressOfMapToEpic = (context:any) => (\n    (action$:any) => {\n        const {server}=context;\n        return action$.pipe(\n            ofType(Types.SELECT),\n            mergeMap(action => {\n                var dataresponse=action.payload;\n                if(isArray(dataresponse)){\n                    dataresponse = dataresponse[0];\n                }\n\n                const getRequest =  (dataresponse) => {\n                    let response;\n                    if(dataresponse && dataresponse.Addresses) {\n                        const add = array(dataresponse.Addresses).filter((a: any) => (\n                            a.Type === 'Permanent'\n                        )).map((a: any) => (\n                            address(\n                                a,\n                            )\n                        ));\n                        let patientAddress= (add && add.length>0)?add[0]:null;\n                        let mapaddress = \"\";\n                        let phone = \"\";\n                        if(patientAddress!=null){\n                            mapaddress = `${patientAddress.country && patientAddress.country.trim().length > 0 ? `${patientAddress.country}${','}` : ''}${patientAddress.state && patientAddress.state.trim().length > 0 ? `${patientAddress.state}${','}` : ''} ${patientAddress.city && patientAddress.city.trim().length > 0 ? `${patientAddress.city}${','}` : ''}${patientAddress.zip && patientAddress.zip.trim().length > 0 ? `${patientAddress.zip}` : ''}`;\n                            phone = (patientAddress.phones && patientAddress.phones[0])? patientAddress.phones[0].num : '';\n\n                        }\n                        console.log('mapaddress:',mapaddress);\n                        console.log('phone:',phone);\n\n                        const payload = [{\n                            mapaddress: mapaddress,\n                            phone: phone,\n                            initmaploop: true\n                        }\n                        ]\n\n                        return from(payload);\n                    } else {\n                        const payload:any = [];\n                            return from(payload);\n                    }\n\n                }\n\n                //  let response = getRequest(dataresponse);\n                //  return  pushtoMapAddress(response);\n                 return getRequest(dataresponse).pipe(\n                    map(response => pushtoMapAddress(response))\n                    )\n\n            })\n        )\n    }\n);\n\n\n\nexport const fetchApptEpic = (context:any) => (\n    (action$:any) => {\n        const {server}=context;\n        return action$.pipe(\n            ofType(Types.SELECT),\n            mergeMap(action => {\n                var dataresponse=action.payload;\n                if(isArray(dataresponse)){\n                    dataresponse = dataresponse[0];\n                }\n                const getRequest =  (dataresponse) => {\n                    let response;\n                    if(dataresponse && dataresponse.PatientID) {\n                        let id= dataresponse.PatientID.find((id:any) => {\n                            if(id['Type'] === \"EPI\") {\n                                return id['ID']\n                            }\n                    });\n\n                        const data= {\n                            // \"PatientID\":\"E5597\"\n                            \"PatientID\":id.ID\n                        }\n                        const response =  server.post({\n                            path:\"getpatientappointment\",\n                            data:data\n                        })\n                             .then((response: any) => response[0])\n                        return from(response)\n                    } else {\n                            return from([]);\n                    }\n\n                }\n\n                return getRequest(dataresponse).pipe(\n                    map(response => pushtoAppt(response))\n                    )\n            })\n        )\n    }\n);\n\nexport const pushCancelApptToEpic = (context:any) => (\n    (action$:any) => {\n        const {server}=context;\n        return action$.pipe(\n            ofType(Types.CANCELAPPT),\n            mergeMap(action => {\n                var dataresponse=action.payload;\n\n                const getRequest =  (dataresponse:any) => {\n                    if(dataresponse) {\n                        const response =  server.handle({\n                            path:\"cancelappointment?PatientID=\"+dataresponse.PatientID+\"&ContactID=\"+dataresponse.ContactID+\"&Reason=\"+dataresponse.Reason+\"&Comment=\"+dataresponse.Comment+\"\",                            \n                        }, 'delete')\n                             .then((response: any) => response[0])\n                        return from(response)\n                    } else {\n                            return from([]);\n                    }\n\n                }\n\n                return getRequest(dataresponse).pipe(\n                    map(response => pushtoCancelAppt(response))\n                    )\n            })\n        )\n    }\n);\n\n\nexport const fetchRefEpic = (context:any) => (\n    (action$:any) => {\n        const {server}=context;\n        return action$.pipe(\n            ofType(Types.SELECT),\n            mergeMap(action => {\n                var dataresponse=action.payload;\n                if(isArray(dataresponse)){\n                    dataresponse = dataresponse[0];\n                }\n                const getRequest =  (dataresponse) => {\n                    let response;\n                    if(dataresponse && dataresponse.PatientID) {\n                        let id= dataresponse.PatientID.find((id:any) => {\n                            if(id['Type'] === \"EPI\") {\n                                return id['ID']\n                            }\n                    });\n\n                        const data= {\n                            // \"PatientID\":\"E5597\"\n                            \"PatientID\":id.ID\n                        }\n                        const response =  server.post({\n                            path:\"getpatientreferrals\",\n                            data:data\n                        })\n                             .then((response: any) => response[0])\n                        return from(response)\n                    }\n                    else {\n                        return from([]);\n                    }\n\n                }\n\n                return getRequest(dataresponse).pipe(\n                    map(response => pushtoRef(response))\n                    )\n            })\n        )\n    }\n);\n\n\n\n\n\n//Claer gadget on Call end\n\nexport const pushClearCalledTo = (context:any) => (\n    (action$:any) => {\n            return action$.pipe(\n                    ofType(Types.RESET),\n                    map(action =>clearCalledTo(action.payload))\n\n            )\n    }\n);\n\nexport const pushClearCaller = (context:any) => (\n    (action$:any) => {\n            return action$.pipe(\n                    ofType(Types.RESET),\n                    map(action =>clearCaller(action.payload))\n\n            )\n    }\n);\n\nexport const pushClearReferal = (context:any) => (\n    (action$:any) => {\n            return action$.pipe(\n                    ofType(Types.RESET),\n                    map(action =>clearReferal(action.payload))\n\n            )\n    }\n);\n\nexport const pushClearAppt = (context:any) => (\n    (action$:any) => {\n            return action$.pipe(\n                    ofType(Types.RESET),\n                    map(action =>clearAppt(action.payload))\n\n            )\n    }\n);\n\nexport const pushClearGlobalSearch = (context:any) => (\n    (action$:any) => {\n            return action$.pipe(\n                    ofType(Types.RESET),\n                    map(action =>clearGlobalSearch(action.payload))\n\n            )\n    }\n);\n\n\n\nexport const fetchPCPEpic = (context:any) => (\n    (action$:any) => {\n        const {server}=context;\n        return action$.pipe(\n            ofType(Types.SELECT),\n            mergeMap(action => {\n                var dataresponse=action.payload;\n                if(isArray(dataresponse)){\n                    dataresponse = dataresponse[0];\n                }\n                const getRequest =  (payload) => {\n                    let response;\n                    if(dataresponse && dataresponse.PatientID) {\n                        let id= dataresponse.PatientID.find((id:any) => {\n                            if(id['Type'] === \"EPI\") {\n                                return id['ID']\n                            }\n                    });\n\n                        const data= {\n                            // \"PatientID\":\"E5597\"\n                            \"PatientID\":id.ID\n                        }\n                        const response =  server.post({\n                            path:\"getpcp\",\n                            data:data\n                        })\n                             .then((response: any) => response[0])\n                        return from(response)\n                    } else {\n                            return from([]);\n                    }\n                }\n\n                return getRequest(action.payload).pipe(\n\n                        map(response => pushtoPCP(response))\n\n\n\n                )\n            })\n        )\n    }\n);\n\n// call epic for patient search by phone\nexport const fetchGlobalPatientEpic = (context:any) => (\n    (action$:any) => {\n        const {server}=context;\n        return action$.pipe(\n            ofType(Types.GETGLOBALSEARCH),\n            mergeMap(action => {\n                //var pay=action.payload;\n                const getRequest =  (payload: any) => {\n                    // const response =  fetch(`https://api.myjson.com/bins/${payload.number}`)\n                    const data= {\n                        \"Name\": payload.name,\n                        \"DateOfBirth\": payload.dob,\n                        \"PatientID\": payload.mrn,\n                        \"PhoneNumber\": payload.phone\n                    }\n                    const response =  server.post({\n                        path:\"getpatientsearchglobal\",\n                        data:data\n                    })\n                         .then((response: any) => response[0])\n                    return from(response)\n                }\n\n                return getRequest(action.payload).pipe(\n\n                        map(response => pushGlobalPatient(response))\n\n\n\n                )\n            })\n        )\n    }\n);\n\n// call epic for patient screenpop\nexport const fetchPatientEpicScreenPop = (context:any) => (\n    (action$:any) => {\n        const {epicserver}=context;\n        console.log('epicserver::',epicserver);\n        return action$.pipe(\n            ofType(Types.ONESCREENPOPGET),\n            mergeMap(action => {\n                //var pay=action.payload;\n                const getRequest =  (payload: any) => {\n                    // const response =  fetch(`https://api.myjson.com/bins/${payload.number}`)\n                    \n                    const response =  epicserver.get({\n                        path:\"?agentId=\"+payload.agentId+\"&location=\"+payload.location+\"&patientId=\"+payload.patientid+\"&activityId=\"+payload.activityId+\"&eventType=Epic\"\n                    })\n                         .then((response: any) => response[1]).catch((response: any) => response)\n                         \n                         return from(response);\n                    \n                }\n\n                return getRequest(action.payload).pipe(\n\n                        map(response => pushPatientEpicScreenPop(response))\n\n\n\n                )\n            })\n        )\n    }\n);\n\n// Patient Store\nexport const patients = (context: any) => {\n    const { log } = context;\n    return (state: typeof initial = initial, action: Action<Types>) => {\n        log.debug(\n            'one-state-patients',\n            'reducer', {\n                action,\n            }\n        );\n\n        let updated = state;\n        const { type, payload } = action;\n        switch (type) {\n            case Types.SET:\n                const  patientdetails  = payload;\n                let selected;\n                // if ((patientdetails) && (patientdetails.length >1)) {\n                //   selected = patientdetails[0];\n                // }\n                updated = {\n                  selected,\n                  patientdetails,\n                  orgList: undefined,\n                };\n                break;\n\n            case Types.RESET:\n                updated = initial;\n                break;\n\n            case Types.SELECT:\n                updated = {\n                    ...updated,\n                    selected: payload,\n                };\n                break;\n        }\n        return updated;\n    }\n}\n"]}},"error":null,"hash":"90562232bd775c7ff28be612492dd55c","cacheData":{"env":{}}}